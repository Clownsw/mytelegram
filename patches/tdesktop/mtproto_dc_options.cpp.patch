diff --git "a/Telegram/SourceFiles/mtproto/mtproto_dc_options.cpp" "b/Telegram/SourceFiles/mtproto/mtproto_dc_options.cpp"
index b6ef68f9b..797de6961 100644
--- "a/Telegram/SourceFiles/mtproto/mtproto_dc_options.cpp"
+++ "b/Telegram/SourceFiles/mtproto/mtproto_dc_options.cpp"
@@ -28,55 +28,61 @@ struct BuiltInDc {
 	int port;
 };
 
+#define IpV4Server "x.tl.ipv4.com"
+#define IpV6Server "x.tl.ipv6.com"
+#define IpV4Port 20443
+#define IpV4Port2 20445
+#define IpV6Port 20443
+#define IpV6Port2 20445
 const BuiltInDc kBuiltInDcs[] = {
-	{ 1, "149.154.175.50" , 443 },
-	{ 2, "149.154.167.51" , 443 },
-	{ 2, "95.161.76.100"  , 443 },
-	{ 3, "149.154.175.100", 443 },
-	{ 4, "149.154.167.91" , 443 },
-	{ 5, "149.154.171.5"  , 443 },
+					{ 1, IpV4Server , IpV4Port },
+					{ 2, IpV4Server , IpV4Port },
+					{ 3, IpV4Server, IpV4Port2 },
+					//{ 4, IpV4 , IpV4Port },
+					//{ 5, IpV4  , IpV4Port },
 };
 
 const BuiltInDc kBuiltInDcsIPv6[] = {
-	{ 1, "2001:0b28:f23d:f001:0000:0000:0000:000a", 443 },
-	{ 2, "2001:067c:04e8:f002:0000:0000:0000:000a", 443 },
-	{ 3, "2001:0b28:f23d:f003:0000:0000:0000:000a", 443 },
-	{ 4, "2001:067c:04e8:f004:0000:0000:0000:000a", 443 },
-	{ 5, "2001:0b28:f23f:f005:0000:0000:0000:000a", 443 },
+					{ 1, IpV6Server, IpV6Port },
+					{ 2, IpV6Server, IpV6Port },
+					{ 3, IpV6Server, IpV6Port2 },
+					//{ 4, IpV6, IpV6Port },
+					//{ 5, IpV6, IpV6Port },
 };
 
 const BuiltInDc kBuiltInDcsTest[] = {
-	{ 1, "149.154.175.10" , 443 },
-	{ 2, "149.154.167.40" , 443 },
-	{ 3, "149.154.175.117", 443 }
+					{ 1, IpV4Server, IpV4Port },
+					{ 2, IpV4Server, IpV4Port },
+					{ 3, IpV4Server, IpV4Port2 }
 };
 
 const BuiltInDc kBuiltInDcsIPv6Test[] = {
-	{ 1, "2001:0b28:f23d:f001:0000:0000:0000:000e", 443 },
-	{ 2, "2001:067c:04e8:f002:0000:0000:0000:000e", 443 },
-	{ 3, "2001:0b28:f23d:f003:0000:0000:0000:000e", 443 }
+					{ 1, IpV6Server, IpV6Port },
+					{ 2, IpV6Server, IpV6Port2 },
+					{ 3, IpV6Server, IpV6Port2 }
 };
 
-const char *kTestPublicRSAKeys[] = { "\
------BEGIN RSA PUBLIC KEY-----\n\
-MIIBCgKCAQEAyMEdY1aR+sCR3ZSJrtztKTKqigvO/vBfqACJLZtS7QMgCGXJ6XIR\n\
-yy7mx66W0/sOFa7/1mAZtEoIokDP3ShoqF4fVNb6XeqgQfaUHd8wJpDWHcR2OFwv\n\
-plUUI1PLTktZ9uW2WE23b+ixNwJjJGwBDJPQEQFBE+vfmH0JP503wr5INS1poWg/\n\
-j25sIWeYPHYeOrFp/eXaqhISP6G+q2IeTaWTXpwZj4LzXq5YOpk4bYEQ6mvRq7D1\n\
-aHWfYmlEGepfaYR8Q0YqvvhYtMte3ITnuSJs171+GDqpdKcSwHnd6FudwGO4pcCO\n\
-j4WcDuXc2CTHgH8gFTNhp/Y8/SpDOhvn9QIDAQAB\n\
------END RSA PUBLIC KEY-----" };
-
-const char *kPublicRSAKeys[] = { "\
------BEGIN RSA PUBLIC KEY-----\n\
-MIIBCgKCAQEA6LszBcC1LGzyr992NzE0ieY+BSaOW622Aa9Bd4ZHLl+TuFQ4lo4g\n\
-5nKaMBwK/BIb9xUfg0Q29/2mgIR6Zr9krM7HjuIcCzFvDtr+L0GQjae9H0pRB2OO\n\
-62cECs5HKhT5DZ98K33vmWiLowc621dQuwKWSQKjWf50XYFw42h21P2KXUGyp2y/\n\
-+aEyZ+uVgLLQbRA1dEjSDZ2iGRy12Mk5gpYc397aYp438fsJoHIgJ2lgMv5h7WY9\n\
-t6N/byY9Nw9p21Og3AoXSL2q/2IJ1WRUhebgAdGVMlV1fkuOQoEzR7EdpqtQD9Cs\n\
-5+bfo3Nhmcyvk5ftB0WkJ9z6bNZ7yxrP8wIDAQAB\n\
------END RSA PUBLIC KEY-----" };
-
+		const char* (kPublicRSAKeys[]) = { "\
+-----BEGIN PUBLIC KEY-----\n\
+MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu+3tvscWDAlEvVylTeMr\n\
+5FpU2AjgqzoQHPjzp69r0YAtq0a8rX0MUe78F/FRAqBaEbZW6WBzF3AjOlNYpOtv\n\
+vwGhl9rGCgziunbd9nwcKJBMDWS9O7Mz/8xjz/swIB4V56XcjOhrjUHJ/GniFKou\n\
+m00xeEcYnr5xnLesvpVMq97Ga6b+xt3HRftHY/Zy1dG5zs8upuiAOlEiKilhu1It\n\
+hfMjFG3NF6TiGrO9YU3YixFbJy67jtHkv5FarscM2fC5iWQ2eP1y6jXR64sGU3Qj\n\
+ncvozYOePrH9jGcnmzUmj42x/H28IjJQ9EjEc22sPOuauK0IF2QiCGh+TfsKCK18\n\
+9wIDAQAB\n\
+-----END PUBLIC KEY-----"
+
+//			"\
+//-----BEGIN RSA PUBLIC KEY-----\n\
+//MIIBCgKCAQEAwVACPi9w23mF3tBkdZz+zwrzKOaaQdr01vAbU4E1pvkfj4sqDsm6\n\
+//lyDONS789sVoD/xCS9Y0hkkC3gtL1tSfTlgCMOOul9lcixlEKzwKENj1Yz/s7daS\n\
+//an9tqw3bfUV/nqgbhGX81v/+7RFAEd+RwFnK7a+XYl9sluzHRyVVaTTveB2GazTw\n\
+//Efzk2DWgkBluml8OREmvfraX3bkHZJTKX4EQSjBbbdJ2ZXIsRrYOXfaA+xayEGB+\n\
+//hN6/cpR1GWgOZRUAiQxoMnlt0R93LCX/j1dnVa/gVbCjdSxpbrfY2g2L4frzjJvd\n\
+//l84Kd9ORYjDEAyFnEA7dD556OptgLQQ2e2iVNq8NZLYTzLp5YpOdO1doK+ttrltg\n\
+//-----END PUBLIC KEY-----"
+		};
 } // namespace
 
 class DcOptions::WriteLocker {
@@ -140,9 +146,9 @@ bool DcOptions::ValidateSecret(bytes::const_span secret) {
 }
 
 void DcOptions::readBuiltInPublicKeys() {
-	const auto builtin = (_environment == Environment::Test)
-		? gsl::make_span(kTestPublicRSAKeys)
-		: gsl::make_span(kPublicRSAKeys);
+	const auto builtin = gsl::make_span(kPublicRSAKeys);// (_environment == Environment::Test)
+		//? gsl::make_span(kTestPublicRSAKeys)
+		//: gsl::make_span(kPublicRSAKeys);
 	for (const auto key : builtin) {
 		const auto keyBytes = bytes::make_span(key, strlen(key));
 		auto parsed = RSAPublicKey(keyBytes);
@@ -604,7 +610,7 @@ DcType DcOptions::dcType(ShiftedDcId shiftedDcId) const {
 		return DcType::Cdn;
 	}
 	const auto dcId = BareDcId(shiftedDcId);
-	if (isDownloadDcId(shiftedDcId) && hasMediaOnlyOptionsFor(dcId)) {
+	if (isMediaClusterDcId(shiftedDcId) && hasMediaOnlyOptionsFor(dcId)) {
 		return DcType::MediaCluster;
 	}
 	return DcType::Regular;
