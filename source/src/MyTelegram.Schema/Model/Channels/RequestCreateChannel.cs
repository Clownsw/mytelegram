// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Channels;

///<summary>
///See <a href="https://core.telegram.org/method/channels.createChannel" />
///</summary>
[TlObject(0x3d5fb10f)]
public sealed class RequestCreateChannel : IRequest<MyTelegram.Schema.IUpdates>
{
    public uint ConstructorId => 0x3d5fb10f;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool Broadcast { get; set; }
    public bool Megagroup { get; set; }
    public bool ForImport { get; set; }
    public string Title { get; set; }
    public string About { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InputGeoPoint" />
    ///</summary>
    public MyTelegram.Schema.IInputGeoPoint? GeoPoint { get; set; }
    public string? Address { get; set; }

    public void ComputeFlag()
    {
        if (Broadcast) { Flags[0] = true; }
        if (Megagroup) { Flags[1] = true; }
        if (ForImport) { Flags[3] = true; }
        if (GeoPoint != null) { Flags[2] = true; }
        if (Address != null) { Flags[2] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        bw.Serialize(Title);
        bw.Serialize(About);
        if (Flags[2]) { GeoPoint.Serialize(bw); }
        if (Flags[2]) { bw.Serialize(Address); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[0]) { Broadcast = true; }
        if (Flags[1]) { Megagroup = true; }
        if (Flags[3]) { ForImport = true; }
        Title = br.Deserialize<string>();
        About = br.Deserialize<string>();
        if (Flags[2]) { GeoPoint = br.Deserialize<MyTelegram.Schema.IInputGeoPoint>(); }
        if (Flags[2]) { Address = br.Deserialize<string>(); }
    }
}
