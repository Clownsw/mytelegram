// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
///See <a href="https://core.telegram.org/method/messages.getExportedChatInvites" />
///</summary>
[TlObject(0xa2b5a3f6)]
public sealed class RequestGetExportedChatInvites : IRequest<MyTelegram.Schema.Messages.IExportedChatInvites>
{
    public uint ConstructorId => 0xa2b5a3f6;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool Revoked { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer Peer { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InputUser" />
    ///</summary>
    public MyTelegram.Schema.IInputUser AdminId { get; set; }
    public int? OffsetDate { get; set; }
    public string? OffsetLink { get; set; }
    public int Limit { get; set; }

    public void ComputeFlag()
    {
        if (Revoked) { Flags[3] = true; }
        if (OffsetDate != 0 && OffsetDate.HasValue) { Flags[2] = true; }
        if (OffsetLink != null) { Flags[2] = true; }

    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        Peer.Serialize(bw);
        AdminId.Serialize(bw);
        if (Flags[2]) { bw.Write(OffsetDate.Value); }
        if (Flags[2]) { bw.Serialize(OffsetLink); }
        bw.Write(Limit);
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[3]) { Revoked = true; }
        Peer = br.Deserialize<MyTelegram.Schema.IInputPeer>();
        AdminId = br.Deserialize<MyTelegram.Schema.IInputUser>();
        if (Flags[2]) { OffsetDate = br.ReadInt32(); }
        if (Flags[2]) { OffsetLink = br.Deserialize<string>(); }
        Limit = br.ReadInt32();
    }
}
