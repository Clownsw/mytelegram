// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
///See <a href="https://core.telegram.org/method/messages.getPollVotes" />
///</summary>
[TlObject(0xb86e380e)]
public sealed class RequestGetPollVotes : IRequest<MyTelegram.Schema.Messages.IVotesList>
{
    public uint ConstructorId => 0xb86e380e;
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer Peer { get; set; }
    public int Id { get; set; }
    public byte[]? Option { get; set; }
    public string? Offset { get; set; }
    public int Limit { get; set; }

    public void ComputeFlag()
    {
        if (Option != null) { Flags[0] = true; }
        if (Offset != null) { Flags[1] = true; }

    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        Peer.Serialize(bw);
        bw.Write(Id);
        if (Flags[0]) { bw.Serialize(Option); }
        if (Flags[1]) { bw.Serialize(Offset); }
        bw.Write(Limit);
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        Peer = br.Deserialize<MyTelegram.Schema.IInputPeer>();
        Id = br.ReadInt32();
        if (Flags[0]) { Option = br.Deserialize<byte[]>(); }
        if (Flags[1]) { Offset = br.Deserialize<string>(); }
        Limit = br.ReadInt32();
    }
}
