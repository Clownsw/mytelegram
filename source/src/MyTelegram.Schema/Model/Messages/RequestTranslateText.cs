// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
///See <a href="https://core.telegram.org/method/messages.translateText" />
///</summary>
[TlObject(0x24ce6dee)]
public sealed class RequestTranslateText : IRequest<MyTelegram.Schema.Messages.ITranslatedText>
{
    public uint ConstructorId => 0x24ce6dee;
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer? Peer { get; set; }
    public int? MsgId { get; set; }
    public string? Text { get; set; }
    public string? FromLang { get; set; }
    public string ToLang { get; set; }

    public void ComputeFlag()
    {
        if (Peer != null) { Flags[0] = true; }
        if (MsgId != 0 && MsgId.HasValue) { Flags[0] = true; }
        if (Text != null) { Flags[1] = true; }
        if (FromLang != null) { Flags[2] = true; }

    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        if (Flags[0]) { Peer.Serialize(bw); }
        if (Flags[0]) { bw.Write(MsgId.Value); }
        if (Flags[1]) { bw.Serialize(Text); }
        if (Flags[2]) { bw.Serialize(FromLang); }
        bw.Serialize(ToLang);
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[0]) { Peer = br.Deserialize<MyTelegram.Schema.IInputPeer>(); }
        if (Flags[0]) { MsgId = br.ReadInt32(); }
        if (Flags[1]) { Text = br.Deserialize<string>(); }
        if (Flags[2]) { FromLang = br.Deserialize<string>(); }
        ToLang = br.Deserialize<string>();
    }
}
