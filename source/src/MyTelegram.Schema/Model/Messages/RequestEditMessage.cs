// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
///See <a href="https://core.telegram.org/method/messages.editMessage" />
///</summary>
[TlObject(0x48f71778)]
public sealed class RequestEditMessage : IRequest<MyTelegram.Schema.IUpdates>
{
    public uint ConstructorId => 0x48f71778;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool NoWebpage { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer Peer { get; set; }
    public int Id { get; set; }
    public string? Message { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InputMedia" />
    ///</summary>
    public MyTelegram.Schema.IInputMedia? Media { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/ReplyMarkup" />
    ///</summary>
    public MyTelegram.Schema.IReplyMarkup? ReplyMarkup { get; set; }
    public TVector<MyTelegram.Schema.IMessageEntity>? Entities { get; set; }
    public int? ScheduleDate { get; set; }

    public void ComputeFlag()
    {
        if (NoWebpage) { Flags[1] = true; }
        if (Message != null) { Flags[11] = true; }
        if (Media != null) { Flags[14] = true; }
        if (ReplyMarkup != null) { Flags[2] = true; }
        if (Entities?.Count > 0) { Flags[3] = true; }
        if (ScheduleDate != 0 && ScheduleDate.HasValue) { Flags[15] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        Peer.Serialize(bw);
        bw.Write(Id);
        if (Flags[11]) { bw.Serialize(Message); }
        if (Flags[14]) { Media.Serialize(bw); }
        if (Flags[2]) { ReplyMarkup.Serialize(bw); }
        if (Flags[3]) { Entities.Serialize(bw); }
        if (Flags[15]) { bw.Write(ScheduleDate.Value); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[1]) { NoWebpage = true; }
        Peer = br.Deserialize<MyTelegram.Schema.IInputPeer>();
        Id = br.ReadInt32();
        if (Flags[11]) { Message = br.Deserialize<string>(); }
        if (Flags[14]) { Media = br.Deserialize<MyTelegram.Schema.IInputMedia>(); }
        if (Flags[2]) { ReplyMarkup = br.Deserialize<MyTelegram.Schema.IReplyMarkup>(); }
        if (Flags[3]) { Entities = br.Deserialize<TVector<MyTelegram.Schema.IMessageEntity>>(); }
        if (Flags[15]) { ScheduleDate = br.ReadInt32(); }
    }
}
