// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;


///<summary>
///See <a href="https://core.telegram.org/constructor/messages.searchResultsCalendar" />
///</summary>
[TlObject(0x147ee23c)]
public class TSearchResultsCalendar : ISearchResultsCalendar
{
    public uint ConstructorId => 0x147ee23c;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool Inexact { get; set; }
    public int Count { get; set; }
    public int MinDate { get; set; }
    public int MinMsgId { get; set; }
    public int? OffsetIdOffset { get; set; }
    public TVector<MyTelegram.Schema.ISearchResultsCalendarPeriod> Periods { get; set; }
    public TVector<MyTelegram.Schema.IMessage> Messages { get; set; }
    public TVector<MyTelegram.Schema.IChat> Chats { get; set; }
    public TVector<MyTelegram.Schema.IUser> Users { get; set; }

    public void ComputeFlag()
    {
        if (Inexact) { Flags[0] = true; }
        if (OffsetIdOffset != 0 && OffsetIdOffset.HasValue) { Flags[1] = true; }

    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        bw.Write(Count);
        bw.Write(MinDate);
        bw.Write(MinMsgId);
        if (Flags[1]) { bw.Write(OffsetIdOffset.Value); }
        Periods.Serialize(bw);
        Messages.Serialize(bw);
        Chats.Serialize(bw);
        Users.Serialize(bw);
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[0]) { Inexact = true; }
        Count = br.ReadInt32();
        MinDate = br.ReadInt32();
        MinMsgId = br.ReadInt32();
        if (Flags[1]) { OffsetIdOffset = br.ReadInt32(); }
        Periods = br.Deserialize<TVector<MyTelegram.Schema.ISearchResultsCalendarPeriod>>();
        Messages = br.Deserialize<TVector<MyTelegram.Schema.IMessage>>();
        Chats = br.Deserialize<TVector<MyTelegram.Schema.IChat>>();
        Users = br.Deserialize<TVector<MyTelegram.Schema.IUser>>();
    }
}