// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
///See <a href="https://core.telegram.org/method/messages.searchGlobal" />
///</summary>
[TlObject(0x4bc6589a)]
public sealed class RequestSearchGlobal : IRequest<MyTelegram.Schema.Messages.IMessages>
{
    public uint ConstructorId => 0x4bc6589a;
    public BitArray Flags { get; set; } = new BitArray(32);
    public int? FolderId { get; set; }
    public string Q { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/MessagesFilter" />
    ///</summary>
    public MyTelegram.Schema.IMessagesFilter Filter { get; set; }
    public int MinDate { get; set; }
    public int MaxDate { get; set; }
    public int OffsetRate { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer OffsetPeer { get; set; }
    public int OffsetId { get; set; }
    public int Limit { get; set; }

    public void ComputeFlag()
    {
        if (FolderId != 0 && FolderId.HasValue) { Flags[0] = true; }

    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        if (Flags[0]) { bw.Write(FolderId.Value); }
        bw.Serialize(Q);
        Filter.Serialize(bw);
        bw.Write(MinDate);
        bw.Write(MaxDate);
        bw.Write(OffsetRate);
        OffsetPeer.Serialize(bw);
        bw.Write(OffsetId);
        bw.Write(Limit);
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[0]) { FolderId = br.ReadInt32(); }
        Q = br.Deserialize<string>();
        Filter = br.Deserialize<MyTelegram.Schema.IMessagesFilter>();
        MinDate = br.ReadInt32();
        MaxDate = br.ReadInt32();
        OffsetRate = br.ReadInt32();
        OffsetPeer = br.Deserialize<MyTelegram.Schema.IInputPeer>();
        OffsetId = br.ReadInt32();
        Limit = br.ReadInt32();
    }
}
