// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
///See <a href="https://core.telegram.org/method/messages.search" />
///</summary>
[TlObject(0xa0fda762)]
public sealed class RequestSearch : IRequest<MyTelegram.Schema.Messages.IMessages>
{
    public uint ConstructorId => 0xa0fda762;
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer Peer { get; set; }
    public string Q { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer? FromId { get; set; }
    public int? TopMsgId { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/MessagesFilter" />
    ///</summary>
    public MyTelegram.Schema.IMessagesFilter Filter { get; set; }
    public int MinDate { get; set; }
    public int MaxDate { get; set; }
    public int OffsetId { get; set; }
    public int AddOffset { get; set; }
    public int Limit { get; set; }
    public int MaxId { get; set; }
    public int MinId { get; set; }
    public long Hash { get; set; }

    public void ComputeFlag()
    {
        if (FromId != null) { Flags[0] = true; }
        if (TopMsgId != 0 && TopMsgId.HasValue) { Flags[1] = true; }

    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        Peer.Serialize(bw);
        bw.Serialize(Q);
        if (Flags[0]) { FromId.Serialize(bw); }
        if (Flags[1]) { bw.Write(TopMsgId.Value); }
        Filter.Serialize(bw);
        bw.Write(MinDate);
        bw.Write(MaxDate);
        bw.Write(OffsetId);
        bw.Write(AddOffset);
        bw.Write(Limit);
        bw.Write(MaxId);
        bw.Write(MinId);
        bw.Write(Hash);
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        Peer = br.Deserialize<MyTelegram.Schema.IInputPeer>();
        Q = br.Deserialize<string>();
        if (Flags[0]) { FromId = br.Deserialize<MyTelegram.Schema.IInputPeer>(); }
        if (Flags[1]) { TopMsgId = br.ReadInt32(); }
        Filter = br.Deserialize<MyTelegram.Schema.IMessagesFilter>();
        MinDate = br.ReadInt32();
        MaxDate = br.ReadInt32();
        OffsetId = br.ReadInt32();
        AddOffset = br.ReadInt32();
        Limit = br.ReadInt32();
        MaxId = br.ReadInt32();
        MinId = br.ReadInt32();
        Hash = br.ReadInt64();
    }
}
