// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
///See <a href="https://core.telegram.org/method/messages.getInlineBotResults" />
///</summary>
[TlObject(0x514e999d)]
public sealed class RequestGetInlineBotResults : IRequest<MyTelegram.Schema.Messages.IBotResults>
{
    public uint ConstructorId => 0x514e999d;
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InputUser" />
    ///</summary>
    public MyTelegram.Schema.IInputUser Bot { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer Peer { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InputGeoPoint" />
    ///</summary>
    public MyTelegram.Schema.IInputGeoPoint? GeoPoint { get; set; }
    public string Query { get; set; }
    public string Offset { get; set; }

    public void ComputeFlag()
    {
        if (GeoPoint != null) { Flags[0] = true; }

    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        Bot.Serialize(bw);
        Peer.Serialize(bw);
        if (Flags[0]) { GeoPoint.Serialize(bw); }
        bw.Serialize(Query);
        bw.Serialize(Offset);
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        Bot = br.Deserialize<MyTelegram.Schema.IInputUser>();
        Peer = br.Deserialize<MyTelegram.Schema.IInputPeer>();
        if (Flags[0]) { GeoPoint = br.Deserialize<MyTelegram.Schema.IInputGeoPoint>(); }
        Query = br.Deserialize<string>();
        Offset = br.Deserialize<string>();
    }
}
