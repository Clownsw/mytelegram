// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;


///<summary>
///See <a href="https://core.telegram.org/constructor/webPage" />
///</summary>
[TlObject(0xe89c45b2)]
public class TWebPage : IWebPage
{
    public uint ConstructorId => 0xe89c45b2;
    public BitArray Flags { get; set; } = new BitArray(32);
    public long Id { get; set; }
    public string Url { get; set; }
    public string DisplayUrl { get; set; }
    public int Hash { get; set; }
    public string? Type { get; set; }
    public string? SiteName { get; set; }
    public string? Title { get; set; }
    public string? Description { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/Photo" />
    ///</summary>
    public MyTelegram.Schema.IPhoto? Photo { get; set; }
    public string? EmbedUrl { get; set; }
    public string? EmbedType { get; set; }
    public int? EmbedWidth { get; set; }
    public int? EmbedHeight { get; set; }
    public int? Duration { get; set; }
    public string? Author { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/Document" />
    ///</summary>
    public MyTelegram.Schema.IDocument? Document { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/Page" />
    ///</summary>
    public MyTelegram.Schema.IPage? CachedPage { get; set; }
    public TVector<MyTelegram.Schema.IWebPageAttribute>? Attributes { get; set; }

    public void ComputeFlag()
    {
        if (Type != null) { Flags[0] = true; }
        if (SiteName != null) { Flags[1] = true; }
        if (Title != null) { Flags[2] = true; }
        if (Description != null) { Flags[3] = true; }
        if (Photo != null) { Flags[4] = true; }
        if (EmbedUrl != null) { Flags[5] = true; }
        if (EmbedType != null) { Flags[5] = true; }
        if (EmbedWidth != 0 && EmbedWidth.HasValue) { Flags[6] = true; }
        if (EmbedHeight != 0 && EmbedHeight.HasValue) { Flags[6] = true; }
        if (Duration != 0 && Duration.HasValue) { Flags[7] = true; }
        if (Author != null) { Flags[8] = true; }
        if (Document != null) { Flags[9] = true; }
        if (CachedPage != null) { Flags[10] = true; }
        if (Attributes?.Count > 0) { Flags[12] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        bw.Write(Id);
        bw.Serialize(Url);
        bw.Serialize(DisplayUrl);
        bw.Write(Hash);
        if (Flags[0]) { bw.Serialize(Type); }
        if (Flags[1]) { bw.Serialize(SiteName); }
        if (Flags[2]) { bw.Serialize(Title); }
        if (Flags[3]) { bw.Serialize(Description); }
        if (Flags[4]) { Photo.Serialize(bw); }
        if (Flags[5]) { bw.Serialize(EmbedUrl); }
        if (Flags[5]) { bw.Serialize(EmbedType); }
        if (Flags[6]) { bw.Write(EmbedWidth.Value); }
        if (Flags[6]) { bw.Write(EmbedHeight.Value); }
        if (Flags[7]) { bw.Write(Duration.Value); }
        if (Flags[8]) { bw.Serialize(Author); }
        if (Flags[9]) { Document.Serialize(bw); }
        if (Flags[10]) { CachedPage.Serialize(bw); }
        if (Flags[12]) { Attributes.Serialize(bw); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        Id = br.ReadInt64();
        Url = br.Deserialize<string>();
        DisplayUrl = br.Deserialize<string>();
        Hash = br.ReadInt32();
        if (Flags[0]) { Type = br.Deserialize<string>(); }
        if (Flags[1]) { SiteName = br.Deserialize<string>(); }
        if (Flags[2]) { Title = br.Deserialize<string>(); }
        if (Flags[3]) { Description = br.Deserialize<string>(); }
        if (Flags[4]) { Photo = br.Deserialize<MyTelegram.Schema.IPhoto>(); }
        if (Flags[5]) { EmbedUrl = br.Deserialize<string>(); }
        if (Flags[5]) { EmbedType = br.Deserialize<string>(); }
        if (Flags[6]) { EmbedWidth = br.ReadInt32(); }
        if (Flags[6]) { EmbedHeight = br.ReadInt32(); }
        if (Flags[7]) { Duration = br.ReadInt32(); }
        if (Flags[8]) { Author = br.Deserialize<string>(); }
        if (Flags[9]) { Document = br.Deserialize<MyTelegram.Schema.IDocument>(); }
        if (Flags[10]) { CachedPage = br.Deserialize<MyTelegram.Schema.IPage>(); }
        if (Flags[12]) { Attributes = br.Deserialize<TVector<MyTelegram.Schema.IWebPageAttribute>>(); }
    }
}