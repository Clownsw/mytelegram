// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;


///<summary>
///See <a href="https://core.telegram.org/constructor/langPackStringPluralized" />
///</summary>
[TlObject(0x6c47ac9f)]
public class TLangPackStringPluralized : ILangPackString
{
    public uint ConstructorId => 0x6c47ac9f;
    public BitArray Flags { get; set; } = new BitArray(32);
    public string Key { get; set; }
    public string? ZeroValue { get; set; }
    public string? OneValue { get; set; }
    public string? TwoValue { get; set; }
    public string? FewValue { get; set; }
    public string? ManyValue { get; set; }
    public string OtherValue { get; set; }

    public void ComputeFlag()
    {
        if (ZeroValue != null) { Flags[0] = true; }
        if (OneValue != null) { Flags[1] = true; }
        if (TwoValue != null) { Flags[2] = true; }
        if (FewValue != null) { Flags[3] = true; }
        if (ManyValue != null) { Flags[4] = true; }

    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        bw.Serialize(Key);
        if (Flags[0]) { bw.Serialize(ZeroValue); }
        if (Flags[1]) { bw.Serialize(OneValue); }
        if (Flags[2]) { bw.Serialize(TwoValue); }
        if (Flags[3]) { bw.Serialize(FewValue); }
        if (Flags[4]) { bw.Serialize(ManyValue); }
        bw.Serialize(OtherValue);
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        Key = br.Deserialize<string>();
        if (Flags[0]) { ZeroValue = br.Deserialize<string>(); }
        if (Flags[1]) { OneValue = br.Deserialize<string>(); }
        if (Flags[2]) { TwoValue = br.Deserialize<string>(); }
        if (Flags[3]) { FewValue = br.Deserialize<string>(); }
        if (Flags[4]) { ManyValue = br.Deserialize<string>(); }
        OtherValue = br.Deserialize<string>();
    }
}