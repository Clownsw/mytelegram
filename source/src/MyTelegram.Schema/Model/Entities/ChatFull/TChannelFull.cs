// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;


///<summary>
///See <a href="https://core.telegram.org/constructor/channelFull" />
///</summary>
[TlObject(0xea68a619)]
public class TChannelFull : IChatFull
{
    public uint ConstructorId => 0xea68a619;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool CanViewParticipants { get; set; }
    public bool CanSetUsername { get; set; }
    public bool CanSetStickers { get; set; }
    public bool HiddenPrehistory { get; set; }
    public bool CanSetLocation { get; set; }
    public bool HasScheduled { get; set; }
    public bool CanViewStats { get; set; }
    public bool Blocked { get; set; }
    public BitArray Flags2 { get; set; } = new BitArray(32);
    public bool CanDeleteChannel { get; set; }
    public long Id { get; set; }
    public string About { get; set; }
    public int? ParticipantsCount { get; set; }
    public int? AdminsCount { get; set; }
    public int? KickedCount { get; set; }
    public int? BannedCount { get; set; }
    public int? OnlineCount { get; set; }
    public int ReadInboxMaxId { get; set; }
    public int ReadOutboxMaxId { get; set; }
    public int UnreadCount { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/Photo" />
    ///</summary>
    public MyTelegram.Schema.IPhoto ChatPhoto { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/PeerNotifySettings" />
    ///</summary>
    public MyTelegram.Schema.IPeerNotifySettings NotifySettings { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/ExportedChatInvite" />
    ///</summary>
    public MyTelegram.Schema.IExportedChatInvite? ExportedInvite { get; set; }
    public TVector<MyTelegram.Schema.IBotInfo> BotInfo { get; set; }
    public long? MigratedFromChatId { get; set; }
    public int? MigratedFromMaxId { get; set; }
    public int? PinnedMsgId { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/StickerSet" />
    ///</summary>
    public MyTelegram.Schema.IStickerSet? Stickerset { get; set; }
    public int? AvailableMinId { get; set; }
    public int? FolderId { get; set; }
    public long? LinkedChatId { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/ChannelLocation" />
    ///</summary>
    public MyTelegram.Schema.IChannelLocation? Location { get; set; }
    public int? SlowmodeSeconds { get; set; }
    public int? SlowmodeNextSendDate { get; set; }
    public int? StatsDc { get; set; }
    public int Pts { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InputGroupCall" />
    ///</summary>
    public MyTelegram.Schema.IInputGroupCall? Call { get; set; }
    public int? TtlPeriod { get; set; }
    public TVector<string>? PendingSuggestions { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/Peer" />
    ///</summary>
    public MyTelegram.Schema.IPeer? GroupcallDefaultJoinAs { get; set; }
    public string? ThemeEmoticon { get; set; }
    public int? RequestsPending { get; set; }
    public TVector<long>? RecentRequesters { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/Peer" />
    ///</summary>
    public MyTelegram.Schema.IPeer? DefaultSendAs { get; set; }
    public TVector<string>? AvailableReactions { get; set; }

    public void ComputeFlag()
    {
        if (CanViewParticipants) { Flags[3] = true; }
        if (CanSetUsername) { Flags[6] = true; }
        if (CanSetStickers) { Flags[7] = true; }
        if (HiddenPrehistory) { Flags[10] = true; }
        if (CanSetLocation) { Flags[16] = true; }
        if (HasScheduled) { Flags[19] = true; }
        if (CanViewStats) { Flags[20] = true; }
        if (Blocked) { Flags[22] = true; }
        if (ParticipantsCount != 0 && ParticipantsCount.HasValue) { Flags[0] = true; }
        if (AdminsCount != 0 && AdminsCount.HasValue) { Flags[1] = true; }
        if (KickedCount != 0 && KickedCount.HasValue) { Flags[2] = true; }
        if (BannedCount != 0 && BannedCount.HasValue) { Flags[2] = true; }
        if (OnlineCount != 0 && OnlineCount.HasValue) { Flags[13] = true; }
        if (ExportedInvite != null) { Flags[23] = true; }
        if (MigratedFromChatId != 0 && MigratedFromChatId.HasValue) { Flags[4] = true; }
        if (MigratedFromMaxId != 0 && MigratedFromMaxId.HasValue) { Flags[4] = true; }
        if (PinnedMsgId != 0 && PinnedMsgId.HasValue) { Flags[5] = true; }
        if (Stickerset != null) { Flags[8] = true; }
        if (AvailableMinId != 0 && AvailableMinId.HasValue) { Flags[9] = true; }
        if (FolderId != 0 && FolderId.HasValue) { Flags[11] = true; }
        if (LinkedChatId != 0 && LinkedChatId.HasValue) { Flags[14] = true; }
        if (Location != null) { Flags[15] = true; }
        if (SlowmodeSeconds != 0 && SlowmodeSeconds.HasValue) { Flags[17] = true; }
        if (SlowmodeNextSendDate != 0 && SlowmodeNextSendDate.HasValue) { Flags[18] = true; }
        if (StatsDc != 0 && StatsDc.HasValue) { Flags[12] = true; }
        if (Call != null) { Flags[21] = true; }
        if (TtlPeriod != 0 && TtlPeriod.HasValue) { Flags[24] = true; }
        if (PendingSuggestions?.Count > 0) { Flags[25] = true; }
        if (GroupcallDefaultJoinAs != null) { Flags[26] = true; }
        if (ThemeEmoticon != null) { Flags[27] = true; }
        if (RequestsPending != 0 && RequestsPending.HasValue) { Flags[28] = true; }
        if (RecentRequesters?.Count > 0) { Flags[28] = true; }
        if (DefaultSendAs != null) { Flags[29] = true; }
        if (AvailableReactions?.Count > 0) { Flags[30] = true; }
        if (CanDeleteChannel) { Flags2[0] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        bw.Serialize(Flags2);
        
        bw.Write(Id);
        bw.Serialize(About);
        if (Flags[0]) { bw.Write(ParticipantsCount.Value); }
        if (Flags[1]) { bw.Write(AdminsCount.Value); }
        if (Flags[2]) { bw.Write(KickedCount.Value); }
        if (Flags[2]) { bw.Write(BannedCount.Value); }
        if (Flags[13]) { bw.Write(OnlineCount.Value); }
        bw.Write(ReadInboxMaxId);
        bw.Write(ReadOutboxMaxId);
        bw.Write(UnreadCount);
        ChatPhoto.Serialize(bw);
        NotifySettings.Serialize(bw);
        if (Flags[23]) { ExportedInvite.Serialize(bw); }
        BotInfo.Serialize(bw);
        if (Flags[4]) { bw.Write(MigratedFromChatId.Value); }
        if (Flags[4]) { bw.Write(MigratedFromMaxId.Value); }
        if (Flags[5]) { bw.Write(PinnedMsgId.Value); }
        if (Flags[8]) { Stickerset.Serialize(bw); }
        if (Flags[9]) { bw.Write(AvailableMinId.Value); }
        if (Flags[11]) { bw.Write(FolderId.Value); }
        if (Flags[14]) { bw.Write(LinkedChatId.Value); }
        if (Flags[15]) { Location.Serialize(bw); }
        if (Flags[17]) { bw.Write(SlowmodeSeconds.Value); }
        if (Flags[18]) { bw.Write(SlowmodeNextSendDate.Value); }
        if (Flags[12]) { bw.Write(StatsDc.Value); }
        bw.Write(Pts);
        if (Flags[21]) { Call.Serialize(bw); }
        if (Flags[24]) { bw.Write(TtlPeriod.Value); }
        if (Flags[25]) { PendingSuggestions.Serialize(bw); }
        if (Flags[26]) { GroupcallDefaultJoinAs.Serialize(bw); }
        if (Flags[27]) { bw.Serialize(ThemeEmoticon); }
        if (Flags[28]) { bw.Write(RequestsPending.Value); }
        if (Flags[28]) { RecentRequesters.Serialize(bw); }
        if (Flags[29]) { DefaultSendAs.Serialize(bw); }
        if (Flags[30]) { AvailableReactions.Serialize(bw); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[3]) { CanViewParticipants = true; }
        if (Flags[6]) { CanSetUsername = true; }
        if (Flags[7]) { CanSetStickers = true; }
        if (Flags[10]) { HiddenPrehistory = true; }
        if (Flags[16]) { CanSetLocation = true; }
        if (Flags[19]) { HasScheduled = true; }
        if (Flags[20]) { CanViewStats = true; }
        if (Flags[22]) { Blocked = true; }
        Flags2 = br.Deserialize<BitArray>();
        if (Flags2[0]) { CanDeleteChannel = true; }
        //CanDeleteChannel = br.Deserialize<bool>();
        Id = br.ReadInt64();
        About = br.Deserialize<string>();
        if (Flags[0]) { ParticipantsCount = br.ReadInt32(); }
        if (Flags[1]) { AdminsCount = br.ReadInt32(); }
        if (Flags[2]) { KickedCount = br.ReadInt32(); }
        if (Flags[2]) { BannedCount = br.ReadInt32(); }
        if (Flags[13]) { OnlineCount = br.ReadInt32(); }
        ReadInboxMaxId = br.ReadInt32();
        ReadOutboxMaxId = br.ReadInt32();
        UnreadCount = br.ReadInt32();
        ChatPhoto = br.Deserialize<MyTelegram.Schema.IPhoto>();
        NotifySettings = br.Deserialize<MyTelegram.Schema.IPeerNotifySettings>();
        if (Flags[23]) { ExportedInvite = br.Deserialize<MyTelegram.Schema.IExportedChatInvite>(); }
        BotInfo = br.Deserialize<TVector<MyTelegram.Schema.IBotInfo>>();
        if (Flags[4]) { MigratedFromChatId = br.ReadInt64(); }
        if (Flags[4]) { MigratedFromMaxId = br.ReadInt32(); }
        if (Flags[5]) { PinnedMsgId = br.ReadInt32(); }
        if (Flags[8]) { Stickerset = br.Deserialize<MyTelegram.Schema.IStickerSet>(); }
        if (Flags[9]) { AvailableMinId = br.ReadInt32(); }
        if (Flags[11]) { FolderId = br.ReadInt32(); }
        if (Flags[14]) { LinkedChatId = br.ReadInt64(); }
        if (Flags[15]) { Location = br.Deserialize<MyTelegram.Schema.IChannelLocation>(); }
        if (Flags[17]) { SlowmodeSeconds = br.ReadInt32(); }
        if (Flags[18]) { SlowmodeNextSendDate = br.ReadInt32(); }
        if (Flags[12]) { StatsDc = br.ReadInt32(); }
        Pts = br.ReadInt32();
        if (Flags[21]) { Call = br.Deserialize<MyTelegram.Schema.IInputGroupCall>(); }
        if (Flags[24]) { TtlPeriod = br.ReadInt32(); }
        if (Flags[25]) { PendingSuggestions = br.Deserialize<TVector<string>>(); }
        if (Flags[26]) { GroupcallDefaultJoinAs = br.Deserialize<MyTelegram.Schema.IPeer>(); }
        if (Flags[27]) { ThemeEmoticon = br.Deserialize<string>(); }
        if (Flags[28]) { RequestsPending = br.ReadInt32(); }
        if (Flags[28]) { RecentRequesters = br.Deserialize<TVector<long>>(); }
        if (Flags[29]) { DefaultSendAs = br.Deserialize<MyTelegram.Schema.IPeer>(); }
        if (Flags[30]) { AvailableReactions = br.Deserialize<TVector<string>>(); }
    }
}