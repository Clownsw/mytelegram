// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;


///<summary>
///See <a href="https://core.telegram.org/constructor/chatFull" />
///</summary>
[TlObject(0xd18ee226)]
public class TChatFull : IChatFull
{
    public uint ConstructorId => 0xd18ee226;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool CanSetUsername { get; set; }
    public bool HasScheduled { get; set; }
    public long Id { get; set; }
    public string About { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/ChatParticipants" />
    ///</summary>
    public MyTelegram.Schema.IChatParticipants Participants { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/Photo" />
    ///</summary>
    public MyTelegram.Schema.IPhoto? ChatPhoto { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/PeerNotifySettings" />
    ///</summary>
    public MyTelegram.Schema.IPeerNotifySettings NotifySettings { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/ExportedChatInvite" />
    ///</summary>
    public MyTelegram.Schema.IExportedChatInvite? ExportedInvite { get; set; }
    public TVector<MyTelegram.Schema.IBotInfo>? BotInfo { get; set; }
    public int? PinnedMsgId { get; set; }
    public int? FolderId { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InputGroupCall" />
    ///</summary>
    public MyTelegram.Schema.IInputGroupCall? Call { get; set; }
    public int? TtlPeriod { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/Peer" />
    ///</summary>
    public MyTelegram.Schema.IPeer? GroupcallDefaultJoinAs { get; set; }
    public string? ThemeEmoticon { get; set; }
    public int? RequestsPending { get; set; }
    public TVector<long>? RecentRequesters { get; set; }
    public TVector<string>? AvailableReactions { get; set; }

    public void ComputeFlag()
    {
        if (CanSetUsername) { Flags[7] = true; }
        if (HasScheduled) { Flags[8] = true; }
        if (ChatPhoto != null) { Flags[2] = true; }
        if (ExportedInvite != null) { Flags[13] = true; }
        if (BotInfo?.Count > 0) { Flags[3] = true; }
        if (PinnedMsgId != 0 && PinnedMsgId.HasValue) { Flags[6] = true; }
        if (FolderId != 0 && FolderId.HasValue) { Flags[11] = true; }
        if (Call != null) { Flags[12] = true; }
        if (TtlPeriod != 0 && TtlPeriod.HasValue) { Flags[14] = true; }
        if (GroupcallDefaultJoinAs != null) { Flags[15] = true; }
        if (ThemeEmoticon != null) { Flags[16] = true; }
        if (RequestsPending != 0 && RequestsPending.HasValue) { Flags[17] = true; }
        if (RecentRequesters?.Count > 0) { Flags[17] = true; }
        if (AvailableReactions?.Count > 0) { Flags[18] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        bw.Write(Id);
        bw.Serialize(About);
        Participants.Serialize(bw);
        if (Flags[2]) { ChatPhoto.Serialize(bw); }
        NotifySettings.Serialize(bw);
        if (Flags[13]) { ExportedInvite.Serialize(bw); }
        if (Flags[3]) { BotInfo.Serialize(bw); }
        if (Flags[6]) { bw.Write(PinnedMsgId.Value); }
        if (Flags[11]) { bw.Write(FolderId.Value); }
        if (Flags[12]) { Call.Serialize(bw); }
        if (Flags[14]) { bw.Write(TtlPeriod.Value); }
        if (Flags[15]) { GroupcallDefaultJoinAs.Serialize(bw); }
        if (Flags[16]) { bw.Serialize(ThemeEmoticon); }
        if (Flags[17]) { bw.Write(RequestsPending.Value); }
        if (Flags[17]) { RecentRequesters.Serialize(bw); }
        if (Flags[18]) { AvailableReactions.Serialize(bw); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[7]) { CanSetUsername = true; }
        if (Flags[8]) { HasScheduled = true; }
        Id = br.ReadInt64();
        About = br.Deserialize<string>();
        Participants = br.Deserialize<MyTelegram.Schema.IChatParticipants>();
        if (Flags[2]) { ChatPhoto = br.Deserialize<MyTelegram.Schema.IPhoto>(); }
        NotifySettings = br.Deserialize<MyTelegram.Schema.IPeerNotifySettings>();
        if (Flags[13]) { ExportedInvite = br.Deserialize<MyTelegram.Schema.IExportedChatInvite>(); }
        if (Flags[3]) { BotInfo = br.Deserialize<TVector<MyTelegram.Schema.IBotInfo>>(); }
        if (Flags[6]) { PinnedMsgId = br.ReadInt32(); }
        if (Flags[11]) { FolderId = br.ReadInt32(); }
        if (Flags[12]) { Call = br.Deserialize<MyTelegram.Schema.IInputGroupCall>(); }
        if (Flags[14]) { TtlPeriod = br.ReadInt32(); }
        if (Flags[15]) { GroupcallDefaultJoinAs = br.Deserialize<MyTelegram.Schema.IPeer>(); }
        if (Flags[16]) { ThemeEmoticon = br.Deserialize<string>(); }
        if (Flags[17]) { RequestsPending = br.ReadInt32(); }
        if (Flags[17]) { RecentRequesters = br.Deserialize<TVector<long>>(); }
        if (Flags[18]) { AvailableReactions = br.Deserialize<TVector<string>>(); }
    }
}