// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;


///<summary>
///See <a href="https://core.telegram.org/constructor/poll" />
///</summary>
[TlObject(0x86e18161)]
public class TPoll : IPoll
{
    public uint ConstructorId => 0x86e18161;
    public long Id { get; set; }
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool Closed { get; set; }
    public bool PublicVoters { get; set; }
    public bool MultipleChoice { get; set; }
    public bool Quiz { get; set; }
    public string Question { get; set; }
    public TVector<MyTelegram.Schema.IPollAnswer> Answers { get; set; }
    public int? ClosePeriod { get; set; }
    public int? CloseDate { get; set; }

    public void ComputeFlag()
    {
        if (Closed) { Flags[0] = true; }
        if (PublicVoters) { Flags[1] = true; }
        if (MultipleChoice) { Flags[2] = true; }
        if (Quiz) { Flags[3] = true; }
        if (ClosePeriod != 0 && ClosePeriod.HasValue) { Flags[4] = true; }
        if (CloseDate != 0 && CloseDate.HasValue) { Flags[5] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Write(Id);
        bw.Serialize(Flags);
        bw.Serialize(Question);
        Answers.Serialize(bw);
        if (Flags[4]) { bw.Write(ClosePeriod.Value); }
        if (Flags[5]) { bw.Write(CloseDate.Value); }
    }

    public void Deserialize(BinaryReader br)
    {
        Id = br.ReadInt64();
        Flags = br.Deserialize<BitArray>();
        if (Flags[0]) { Closed = true; }
        if (Flags[1]) { PublicVoters = true; }
        if (Flags[2]) { MultipleChoice = true; }
        if (Flags[3]) { Quiz = true; }
        Question = br.Deserialize<string>();
        Answers = br.Deserialize<TVector<MyTelegram.Schema.IPollAnswer>>();
        if (Flags[4]) { ClosePeriod = br.ReadInt32(); }
        if (Flags[5]) { CloseDate = br.ReadInt32(); }
    }
}