// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;


///<summary>
///See <a href="https://core.telegram.org/constructor/config" />
///</summary>
[TlObject(0x330b4067)]
public class TConfig : IConfig
{
    public uint ConstructorId => 0x330b4067;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool PhonecallsEnabled { get; set; }
    public bool DefaultP2pContacts { get; set; }
    public bool PreloadFeaturedStickers { get; set; }
    public bool IgnorePhoneEntities { get; set; }
    public bool RevokePmInbox { get; set; }
    public bool BlockedMode { get; set; }
    public bool PfsEnabled { get; set; }
    public int Date { get; set; }
    public int Expires { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/Bool" />
    ///</summary>
    public bool TestMode { get; set; }
    public int ThisDc { get; set; }
    public TVector<MyTelegram.Schema.IDcOption> DcOptions { get; set; }
    public string DcTxtDomainName { get; set; }
    public int ChatSizeMax { get; set; }
    public int MegagroupSizeMax { get; set; }
    public int ForwardedCountMax { get; set; }
    public int OnlineUpdatePeriodMs { get; set; }
    public int OfflineBlurTimeoutMs { get; set; }
    public int OfflineIdleTimeoutMs { get; set; }
    public int OnlineCloudTimeoutMs { get; set; }
    public int NotifyCloudDelayMs { get; set; }
    public int NotifyDefaultDelayMs { get; set; }
    public int PushChatPeriodMs { get; set; }
    public int PushChatLimit { get; set; }
    public int SavedGifsLimit { get; set; }
    public int EditTimeLimit { get; set; }
    public int RevokeTimeLimit { get; set; }
    public int RevokePmTimeLimit { get; set; }
    public int RatingEDecay { get; set; }
    public int StickersRecentLimit { get; set; }
    public int StickersFavedLimit { get; set; }
    public int ChannelsReadMediaPeriod { get; set; }
    public int? TmpSessions { get; set; }
    public int PinnedDialogsCountMax { get; set; }
    public int PinnedInfolderCountMax { get; set; }
    public int CallReceiveTimeoutMs { get; set; }
    public int CallRingTimeoutMs { get; set; }
    public int CallConnectTimeoutMs { get; set; }
    public int CallPacketTimeoutMs { get; set; }
    public string MeUrlPrefix { get; set; }
    public string? AutoupdateUrlPrefix { get; set; }
    public string? GifSearchUsername { get; set; }
    public string? VenueSearchUsername { get; set; }
    public string? ImgSearchUsername { get; set; }
    public string? StaticMapsProvider { get; set; }
    public int CaptionLengthMax { get; set; }
    public int MessageLengthMax { get; set; }
    public int WebfileDcId { get; set; }
    public string? SuggestedLangCode { get; set; }
    public int? LangPackVersion { get; set; }
    public int? BaseLangPackVersion { get; set; }

    public void ComputeFlag()
    {
        if (PhonecallsEnabled) { Flags[1] = true; }
        if (DefaultP2pContacts) { Flags[3] = true; }
        if (PreloadFeaturedStickers) { Flags[4] = true; }
        if (IgnorePhoneEntities) { Flags[5] = true; }
        if (RevokePmInbox) { Flags[6] = true; }
        if (BlockedMode) { Flags[8] = true; }
        if (PfsEnabled) { Flags[13] = true; }
        if (TmpSessions != 0 && TmpSessions.HasValue) { Flags[0] = true; }
        if (AutoupdateUrlPrefix != null) { Flags[7] = true; }
        if (GifSearchUsername != null) { Flags[9] = true; }
        if (VenueSearchUsername != null) { Flags[10] = true; }
        if (ImgSearchUsername != null) { Flags[11] = true; }
        if (StaticMapsProvider != null) { Flags[12] = true; }
        if (SuggestedLangCode != null) { Flags[2] = true; }
        if (LangPackVersion != 0 && LangPackVersion.HasValue) { Flags[2] = true; }
        if (BaseLangPackVersion != 0 && BaseLangPackVersion.HasValue) { Flags[2] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        bw.Write(Date);
        bw.Write(Expires);
        bw.Serialize(TestMode);
        bw.Write(ThisDc);
        DcOptions.Serialize(bw);
        bw.Serialize(DcTxtDomainName);
        bw.Write(ChatSizeMax);
        bw.Write(MegagroupSizeMax);
        bw.Write(ForwardedCountMax);
        bw.Write(OnlineUpdatePeriodMs);
        bw.Write(OfflineBlurTimeoutMs);
        bw.Write(OfflineIdleTimeoutMs);
        bw.Write(OnlineCloudTimeoutMs);
        bw.Write(NotifyCloudDelayMs);
        bw.Write(NotifyDefaultDelayMs);
        bw.Write(PushChatPeriodMs);
        bw.Write(PushChatLimit);
        bw.Write(SavedGifsLimit);
        bw.Write(EditTimeLimit);
        bw.Write(RevokeTimeLimit);
        bw.Write(RevokePmTimeLimit);
        bw.Write(RatingEDecay);
        bw.Write(StickersRecentLimit);
        bw.Write(StickersFavedLimit);
        bw.Write(ChannelsReadMediaPeriod);
        if (Flags[0]) { bw.Write(TmpSessions.Value); }
        bw.Write(PinnedDialogsCountMax);
        bw.Write(PinnedInfolderCountMax);
        bw.Write(CallReceiveTimeoutMs);
        bw.Write(CallRingTimeoutMs);
        bw.Write(CallConnectTimeoutMs);
        bw.Write(CallPacketTimeoutMs);
        bw.Serialize(MeUrlPrefix);
        if (Flags[7]) { bw.Serialize(AutoupdateUrlPrefix); }
        if (Flags[9]) { bw.Serialize(GifSearchUsername); }
        if (Flags[10]) { bw.Serialize(VenueSearchUsername); }
        if (Flags[11]) { bw.Serialize(ImgSearchUsername); }
        if (Flags[12]) { bw.Serialize(StaticMapsProvider); }
        bw.Write(CaptionLengthMax);
        bw.Write(MessageLengthMax);
        bw.Write(WebfileDcId);
        if (Flags[2]) { bw.Serialize(SuggestedLangCode); }
        if (Flags[2]) { bw.Write(LangPackVersion.Value); }
        if (Flags[2]) { bw.Write(BaseLangPackVersion.Value); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[1]) { PhonecallsEnabled = true; }
        if (Flags[3]) { DefaultP2pContacts = true; }
        if (Flags[4]) { PreloadFeaturedStickers = true; }
        if (Flags[5]) { IgnorePhoneEntities = true; }
        if (Flags[6]) { RevokePmInbox = true; }
        if (Flags[8]) { BlockedMode = true; }
        if (Flags[13]) { PfsEnabled = true; }
        Date = br.ReadInt32();
        Expires = br.ReadInt32();
        TestMode = br.Deserialize<bool>();
        ThisDc = br.ReadInt32();
        DcOptions = br.Deserialize<TVector<MyTelegram.Schema.IDcOption>>();
        DcTxtDomainName = br.Deserialize<string>();
        ChatSizeMax = br.ReadInt32();
        MegagroupSizeMax = br.ReadInt32();
        ForwardedCountMax = br.ReadInt32();
        OnlineUpdatePeriodMs = br.ReadInt32();
        OfflineBlurTimeoutMs = br.ReadInt32();
        OfflineIdleTimeoutMs = br.ReadInt32();
        OnlineCloudTimeoutMs = br.ReadInt32();
        NotifyCloudDelayMs = br.ReadInt32();
        NotifyDefaultDelayMs = br.ReadInt32();
        PushChatPeriodMs = br.ReadInt32();
        PushChatLimit = br.ReadInt32();
        SavedGifsLimit = br.ReadInt32();
        EditTimeLimit = br.ReadInt32();
        RevokeTimeLimit = br.ReadInt32();
        RevokePmTimeLimit = br.ReadInt32();
        RatingEDecay = br.ReadInt32();
        StickersRecentLimit = br.ReadInt32();
        StickersFavedLimit = br.ReadInt32();
        ChannelsReadMediaPeriod = br.ReadInt32();
        if (Flags[0]) { TmpSessions = br.ReadInt32(); }
        PinnedDialogsCountMax = br.ReadInt32();
        PinnedInfolderCountMax = br.ReadInt32();
        CallReceiveTimeoutMs = br.ReadInt32();
        CallRingTimeoutMs = br.ReadInt32();
        CallConnectTimeoutMs = br.ReadInt32();
        CallPacketTimeoutMs = br.ReadInt32();
        MeUrlPrefix = br.Deserialize<string>();
        if (Flags[7]) { AutoupdateUrlPrefix = br.Deserialize<string>(); }
        if (Flags[9]) { GifSearchUsername = br.Deserialize<string>(); }
        if (Flags[10]) { VenueSearchUsername = br.Deserialize<string>(); }
        if (Flags[11]) { ImgSearchUsername = br.Deserialize<string>(); }
        if (Flags[12]) { StaticMapsProvider = br.Deserialize<string>(); }
        CaptionLengthMax = br.ReadInt32();
        MessageLengthMax = br.ReadInt32();
        WebfileDcId = br.ReadInt32();
        if (Flags[2]) { SuggestedLangCode = br.Deserialize<string>(); }
        if (Flags[2]) { LangPackVersion = br.ReadInt32(); }
        if (Flags[2]) { BaseLangPackVersion = br.ReadInt32(); }
    }
}