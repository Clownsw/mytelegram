// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;


///<summary>
///See <a href="https://core.telegram.org/constructor/channel" />
///</summary>
[TlObject(0x8261ac61)]
public class TChannel : IChat
{
    public uint ConstructorId => 0x8261ac61;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool Creator { get; set; }
    public bool Left { get; set; }
    public bool Broadcast { get; set; }
    public bool Verified { get; set; }
    public bool Megagroup { get; set; }
    public bool Restricted { get; set; }
    public bool Signatures { get; set; }
    public bool Min { get; set; }
    public bool Scam { get; set; }
    public bool HasLink { get; set; }
    public bool HasGeo { get; set; }
    public bool SlowmodeEnabled { get; set; }
    public bool CallActive { get; set; }
    public bool CallNotEmpty { get; set; }
    public bool Fake { get; set; }
    public bool Gigagroup { get; set; }
    public long Id { get; set; }
    public long? AccessHash { get; set; }
    public string Title { get; set; }
    public string? Username { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/ChatPhoto" />
    ///</summary>
    public MyTelegram.Schema.IChatPhoto Photo { get; set; }
    public int Date { get; set; }
    public TVector<MyTelegram.Schema.IRestrictionReason>? RestrictionReason { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/ChatAdminRights" />
    ///</summary>
    public MyTelegram.Schema.IChatAdminRights? AdminRights { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/ChatBannedRights" />
    ///</summary>
    public MyTelegram.Schema.IChatBannedRights? BannedRights { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/ChatBannedRights" />
    ///</summary>
    public MyTelegram.Schema.IChatBannedRights? DefaultBannedRights { get; set; }
    public int? ParticipantsCount { get; set; }

    public void ComputeFlag()
    {
        if (Creator) { Flags[0] = true; }
        if (Left) { Flags[2] = true; }
        if (Broadcast) { Flags[5] = true; }
        if (Verified) { Flags[7] = true; }
        if (Megagroup) { Flags[8] = true; }
        if (Restricted) { Flags[9] = true; }
        if (Signatures) { Flags[11] = true; }
        if (Min) { Flags[12] = true; }
        if (Scam) { Flags[19] = true; }
        if (HasLink) { Flags[20] = true; }
        if (HasGeo) { Flags[21] = true; }
        if (SlowmodeEnabled) { Flags[22] = true; }
        if (CallActive) { Flags[23] = true; }
        if (CallNotEmpty) { Flags[24] = true; }
        if (Fake) { Flags[25] = true; }
        if (Gigagroup) { Flags[26] = true; }
        if (AccessHash != 0 && AccessHash.HasValue) { Flags[13] = true; }
        if (Username != null) { Flags[6] = true; }
        if (RestrictionReason?.Count > 0) { Flags[9] = true; }
        if (AdminRights != null) { Flags[14] = true; }
        if (BannedRights != null) { Flags[15] = true; }
        if (DefaultBannedRights != null) { Flags[18] = true; }
        if (ParticipantsCount != 0 && ParticipantsCount.HasValue) { Flags[17] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        bw.Write(Id);
        if (Flags[13]) { bw.Write(AccessHash.Value); }
        bw.Serialize(Title);
        if (Flags[6]) { bw.Serialize(Username); }
        Photo.Serialize(bw);
        bw.Write(Date);
        if (Flags[9]) { RestrictionReason.Serialize(bw); }
        if (Flags[14]) { AdminRights.Serialize(bw); }
        if (Flags[15]) { BannedRights.Serialize(bw); }
        if (Flags[18]) { DefaultBannedRights.Serialize(bw); }
        if (Flags[17]) { bw.Write(ParticipantsCount.Value); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[0]) { Creator = true; }
        if (Flags[2]) { Left = true; }
        if (Flags[5]) { Broadcast = true; }
        if (Flags[7]) { Verified = true; }
        if (Flags[8]) { Megagroup = true; }
        if (Flags[9]) { Restricted = true; }
        if (Flags[11]) { Signatures = true; }
        if (Flags[12]) { Min = true; }
        if (Flags[19]) { Scam = true; }
        if (Flags[20]) { HasLink = true; }
        if (Flags[21]) { HasGeo = true; }
        if (Flags[22]) { SlowmodeEnabled = true; }
        if (Flags[23]) { CallActive = true; }
        if (Flags[24]) { CallNotEmpty = true; }
        if (Flags[25]) { Fake = true; }
        if (Flags[26]) { Gigagroup = true; }
        Id = br.ReadInt64();
        if (Flags[13]) { AccessHash = br.ReadInt64(); }
        Title = br.Deserialize<string>();
        if (Flags[6]) { Username = br.Deserialize<string>(); }
        Photo = br.Deserialize<MyTelegram.Schema.IChatPhoto>();
        Date = br.ReadInt32();
        if (Flags[9]) { RestrictionReason = br.Deserialize<TVector<MyTelegram.Schema.IRestrictionReason>>(); }
        if (Flags[14]) { AdminRights = br.Deserialize<MyTelegram.Schema.IChatAdminRights>(); }
        if (Flags[15]) { BannedRights = br.Deserialize<MyTelegram.Schema.IChatBannedRights>(); }
        if (Flags[18]) { DefaultBannedRights = br.Deserialize<MyTelegram.Schema.IChatBannedRights>(); }
        if (Flags[17]) { ParticipantsCount = br.ReadInt32(); }
    }
}