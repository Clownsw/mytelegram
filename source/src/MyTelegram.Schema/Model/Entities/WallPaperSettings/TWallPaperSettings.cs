// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;


///<summary>
///See <a href="https://core.telegram.org/constructor/wallPaperSettings" />
///</summary>
[TlObject(0x1dc1bca4)]
public class TWallPaperSettings : IWallPaperSettings
{
    public uint ConstructorId => 0x1dc1bca4;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool Blur { get; set; }
    public bool Motion { get; set; }
    public int? BackgroundColor { get; set; }
    public int? SecondBackgroundColor { get; set; }
    public int? ThirdBackgroundColor { get; set; }
    public int? FourthBackgroundColor { get; set; }
    public int? Intensity { get; set; }
    public int? Rotation { get; set; }

    public void ComputeFlag()
    {
        if (Blur) { Flags[1] = true; }
        if (Motion) { Flags[2] = true; }
        if (BackgroundColor != 0 && BackgroundColor.HasValue) { Flags[0] = true; }
        if (SecondBackgroundColor != 0 && SecondBackgroundColor.HasValue) { Flags[4] = true; }
        if (ThirdBackgroundColor != 0 && ThirdBackgroundColor.HasValue) { Flags[5] = true; }
        if (FourthBackgroundColor != 0 && FourthBackgroundColor.HasValue) { Flags[6] = true; }
        if (Intensity != 0 && Intensity.HasValue) { Flags[3] = true; }
        if (Rotation != 0 && Rotation.HasValue) { Flags[4] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        if (Flags[0]) { bw.Write(BackgroundColor.Value); }
        if (Flags[4]) { bw.Write(SecondBackgroundColor.Value); }
        if (Flags[5]) { bw.Write(ThirdBackgroundColor.Value); }
        if (Flags[6]) { bw.Write(FourthBackgroundColor.Value); }
        if (Flags[3]) { bw.Write(Intensity.Value); }
        if (Flags[4]) { bw.Write(Rotation.Value); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[1]) { Blur = true; }
        if (Flags[2]) { Motion = true; }
        if (Flags[0]) { BackgroundColor = br.ReadInt32(); }
        if (Flags[4]) { SecondBackgroundColor = br.ReadInt32(); }
        if (Flags[5]) { ThirdBackgroundColor = br.ReadInt32(); }
        if (Flags[6]) { FourthBackgroundColor = br.ReadInt32(); }
        if (Flags[3]) { Intensity = br.ReadInt32(); }
        if (Flags[4]) { Rotation = br.ReadInt32(); }
    }
}