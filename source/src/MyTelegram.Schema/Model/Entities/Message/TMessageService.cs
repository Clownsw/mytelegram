// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;


///<summary>
///See <a href="https://core.telegram.org/constructor/messageService" />
///</summary>
[TlObject(0x2b085862)]
public class TMessageService : IMessage
{
    public uint ConstructorId => 0x2b085862;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool Out { get; set; }
    public bool Mentioned { get; set; }
    public bool MediaUnread { get; set; }
    public bool Silent { get; set; }
    public bool Post { get; set; }
    public bool Legacy { get; set; }
    public int Id { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/Peer" />
    ///</summary>
    public MyTelegram.Schema.IPeer? FromId { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/Peer" />
    ///</summary>
    public MyTelegram.Schema.IPeer PeerId { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/MessageReplyHeader" />
    ///</summary>
    public MyTelegram.Schema.IMessageReplyHeader? ReplyTo { get; set; }
    public int Date { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/MessageAction" />
    ///</summary>
    public MyTelegram.Schema.IMessageAction Action { get; set; }
    public int? TtlPeriod { get; set; }

    public void ComputeFlag()
    {
        if (Out) { Flags[1] = true; }
        if (Mentioned) { Flags[4] = true; }
        if (MediaUnread) { Flags[5] = true; }
        if (Silent) { Flags[13] = true; }
        if (Post) { Flags[14] = true; }
        if (Legacy) { Flags[19] = true; }
        if (FromId != null) { Flags[8] = true; }
        if (ReplyTo != null) { Flags[3] = true; }
        if (TtlPeriod != 0 && TtlPeriod.HasValue) { Flags[25] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        bw.Write(Id);
        if (Flags[8]) { FromId.Serialize(bw); }
        PeerId.Serialize(bw);
        if (Flags[3]) { ReplyTo.Serialize(bw); }
        bw.Write(Date);
        Action.Serialize(bw);
        if (Flags[25]) { bw.Write(TtlPeriod.Value); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[1]) { Out = true; }
        if (Flags[4]) { Mentioned = true; }
        if (Flags[5]) { MediaUnread = true; }
        if (Flags[13]) { Silent = true; }
        if (Flags[14]) { Post = true; }
        if (Flags[19]) { Legacy = true; }
        Id = br.ReadInt32();
        if (Flags[8]) { FromId = br.Deserialize<MyTelegram.Schema.IPeer>(); }
        PeerId = br.Deserialize<MyTelegram.Schema.IPeer>();
        if (Flags[3]) { ReplyTo = br.Deserialize<MyTelegram.Schema.IMessageReplyHeader>(); }
        Date = br.ReadInt32();
        Action = br.Deserialize<MyTelegram.Schema.IMessageAction>();
        if (Flags[25]) { TtlPeriod = br.ReadInt32(); }
    }
}