// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;


///<summary>
///See <a href="https://core.telegram.org/constructor/message" />
///</summary>
[TlObject(0x38116ee0)]
public class TMessage : IMessage
{
    public uint ConstructorId => 0x38116ee0;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool Out { get; set; }
    public bool Mentioned { get; set; }
    public bool MediaUnread { get; set; }
    public bool Silent { get; set; }
    public bool Post { get; set; }
    public bool FromScheduled { get; set; }
    public bool Legacy { get; set; }
    public bool EditHide { get; set; }
    public bool Pinned { get; set; }
    public bool Noforwards { get; set; }
    public int Id { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/Peer" />
    ///</summary>
    public MyTelegram.Schema.IPeer? FromId { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/Peer" />
    ///</summary>
    public MyTelegram.Schema.IPeer PeerId { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/MessageFwdHeader" />
    ///</summary>
    public MyTelegram.Schema.IMessageFwdHeader? FwdFrom { get; set; }
    public long? ViaBotId { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/MessageReplyHeader" />
    ///</summary>
    public MyTelegram.Schema.IMessageReplyHeader? ReplyTo { get; set; }
    public int Date { get; set; }
    public string Message { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/MessageMedia" />
    ///</summary>
    public MyTelegram.Schema.IMessageMedia? Media { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/ReplyMarkup" />
    ///</summary>
    public MyTelegram.Schema.IReplyMarkup? ReplyMarkup { get; set; }
    public TVector<MyTelegram.Schema.IMessageEntity>? Entities { get; set; }
    public int? Views { get; set; }
    public int? Forwards { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/MessageReplies" />
    ///</summary>
    public MyTelegram.Schema.IMessageReplies? Replies { get; set; }
    public int? EditDate { get; set; }
    public string? PostAuthor { get; set; }
    public long? GroupedId { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/MessageReactions" />
    ///</summary>
    public MyTelegram.Schema.IMessageReactions? Reactions { get; set; }
    public TVector<MyTelegram.Schema.IRestrictionReason>? RestrictionReason { get; set; }
    public int? TtlPeriod { get; set; }

    public void ComputeFlag()
    {
        if (Out) { Flags[1] = true; }
        if (Mentioned) { Flags[4] = true; }
        if (MediaUnread) { Flags[5] = true; }
        if (Silent) { Flags[13] = true; }
        if (Post) { Flags[14] = true; }
        if (FromScheduled) { Flags[18] = true; }
        if (Legacy) { Flags[19] = true; }
        if (EditHide) { Flags[21] = true; }
        if (Pinned) { Flags[24] = true; }
        if (Noforwards) { Flags[26] = true; }
        if (FromId != null) { Flags[8] = true; }
        if (FwdFrom != null) { Flags[2] = true; }
        if (ViaBotId != 0 && ViaBotId.HasValue) { Flags[11] = true; }
        if (ReplyTo != null) { Flags[3] = true; }
        if (Media != null) { Flags[9] = true; }
        if (ReplyMarkup != null) { Flags[6] = true; }
        if (Entities?.Count > 0) { Flags[7] = true; }
        if (Views != 0 && Views.HasValue) { Flags[10] = true; }
        if (Forwards != 0 && Forwards.HasValue) { Flags[10] = true; }
        if (Replies != null) { Flags[23] = true; }
        if (EditDate != 0 && EditDate.HasValue) { Flags[15] = true; }
        if (PostAuthor != null) { Flags[16] = true; }
        if (GroupedId != 0 && GroupedId.HasValue) { Flags[17] = true; }
        if (Reactions != null) { Flags[20] = true; }
        if (RestrictionReason?.Count > 0) { Flags[22] = true; }
        if (TtlPeriod != 0 && TtlPeriod.HasValue) { Flags[25] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        bw.Write(Id);
        if (Flags[8]) { FromId.Serialize(bw); }
        PeerId.Serialize(bw);
        if (Flags[2]) { FwdFrom.Serialize(bw); }
        if (Flags[11]) { bw.Write(ViaBotId.Value); }
        if (Flags[3]) { ReplyTo.Serialize(bw); }
        bw.Write(Date);
        bw.Serialize(Message);
        if (Flags[9]) { Media.Serialize(bw); }
        if (Flags[6]) { ReplyMarkup.Serialize(bw); }
        if (Flags[7]) { Entities.Serialize(bw); }
        if (Flags[10]) { bw.Write(Views.Value); }
        if (Flags[10]) { bw.Write(Forwards.Value); }
        if (Flags[23]) { Replies.Serialize(bw); }
        if (Flags[15]) { bw.Write(EditDate.Value); }
        if (Flags[16]) { bw.Serialize(PostAuthor); }
        if (Flags[17]) { bw.Write(GroupedId.Value); }
        if (Flags[20]) { Reactions.Serialize(bw); }
        if (Flags[22]) { RestrictionReason.Serialize(bw); }
        if (Flags[25]) { bw.Write(TtlPeriod.Value); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[1]) { Out = true; }
        if (Flags[4]) { Mentioned = true; }
        if (Flags[5]) { MediaUnread = true; }
        if (Flags[13]) { Silent = true; }
        if (Flags[14]) { Post = true; }
        if (Flags[18]) { FromScheduled = true; }
        if (Flags[19]) { Legacy = true; }
        if (Flags[21]) { EditHide = true; }
        if (Flags[24]) { Pinned = true; }
        if (Flags[26]) { Noforwards = true; }
        Id = br.ReadInt32();
        if (Flags[8]) { FromId = br.Deserialize<MyTelegram.Schema.IPeer>(); }
        PeerId = br.Deserialize<MyTelegram.Schema.IPeer>();
        if (Flags[2]) { FwdFrom = br.Deserialize<MyTelegram.Schema.IMessageFwdHeader>(); }
        if (Flags[11]) { ViaBotId = br.ReadInt64(); }
        if (Flags[3]) { ReplyTo = br.Deserialize<MyTelegram.Schema.IMessageReplyHeader>(); }
        Date = br.ReadInt32();
        Message = br.Deserialize<string>();
        if (Flags[9]) { Media = br.Deserialize<MyTelegram.Schema.IMessageMedia>(); }
        if (Flags[6]) { ReplyMarkup = br.Deserialize<MyTelegram.Schema.IReplyMarkup>(); }
        if (Flags[7]) { Entities = br.Deserialize<TVector<MyTelegram.Schema.IMessageEntity>>(); }
        if (Flags[10]) { Views = br.ReadInt32(); }
        if (Flags[10]) { Forwards = br.ReadInt32(); }
        if (Flags[23]) { Replies = br.Deserialize<MyTelegram.Schema.IMessageReplies>(); }
        if (Flags[15]) { EditDate = br.ReadInt32(); }
        if (Flags[16]) { PostAuthor = br.Deserialize<string>(); }
        if (Flags[17]) { GroupedId = br.ReadInt64(); }
        if (Flags[20]) { Reactions = br.Deserialize<MyTelegram.Schema.IMessageReactions>(); }
        if (Flags[22]) { RestrictionReason = br.Deserialize<TVector<MyTelegram.Schema.IRestrictionReason>>(); }
        if (Flags[25]) { TtlPeriod = br.ReadInt32(); }
    }
}