// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;


///<summary>
///See <a href="https://core.telegram.org/constructor/updateBotInlineQuery" />
///</summary>
[TlObject(0x496f379c)]
public class TUpdateBotInlineQuery : IUpdate
{
    public uint ConstructorId => 0x496f379c;
    public BitArray Flags { get; set; } = new BitArray(32);
    public long QueryId { get; set; }
    public long UserId { get; set; }
    public string Query { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/GeoPoint" />
    ///</summary>
    public MyTelegram.Schema.IGeoPoint? Geo { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InlineQueryPeerType" />
    ///</summary>
    public MyTelegram.Schema.IInlineQueryPeerType? PeerType { get; set; }
    public string Offset { get; set; }

    public void ComputeFlag()
    {
        if (Geo != null) { Flags[0] = true; }
        if (PeerType != null) { Flags[1] = true; }

    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        bw.Write(QueryId);
        bw.Write(UserId);
        bw.Serialize(Query);
        if (Flags[0]) { Geo.Serialize(bw); }
        if (Flags[1]) { PeerType.Serialize(bw); }
        bw.Serialize(Offset);
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        QueryId = br.ReadInt64();
        UserId = br.ReadInt64();
        Query = br.Deserialize<string>();
        if (Flags[0]) { Geo = br.Deserialize<MyTelegram.Schema.IGeoPoint>(); }
        if (Flags[1]) { PeerType = br.Deserialize<MyTelegram.Schema.IInlineQueryPeerType>(); }
        Offset = br.Deserialize<string>();
    }
}