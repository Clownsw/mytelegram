// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;


///<summary>
///See <a href="https://core.telegram.org/constructor/peerSettings" />
///</summary>
[TlObject(0x733f2961)]
public class TPeerSettings : IPeerSettings
{
    public uint ConstructorId => 0x733f2961;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool ReportSpam { get; set; }
    public bool AddContact { get; set; }
    public bool BlockContact { get; set; }
    public bool ShareContact { get; set; }
    public bool NeedContactsException { get; set; }
    public bool ReportGeo { get; set; }
    public bool Autoarchived { get; set; }
    public bool InviteMembers { get; set; }
    public int? GeoDistance { get; set; }

    public void ComputeFlag()
    {
        if (ReportSpam) { Flags[0] = true; }
        if (AddContact) { Flags[1] = true; }
        if (BlockContact) { Flags[2] = true; }
        if (ShareContact) { Flags[3] = true; }
        if (NeedContactsException) { Flags[4] = true; }
        if (ReportGeo) { Flags[5] = true; }
        if (Autoarchived) { Flags[7] = true; }
        if (InviteMembers) { Flags[8] = true; }
        if (GeoDistance != 0 && GeoDistance.HasValue) { Flags[6] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        if (Flags[6]) { bw.Write(GeoDistance.Value); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[0]) { ReportSpam = true; }
        if (Flags[1]) { AddContact = true; }
        if (Flags[2]) { BlockContact = true; }
        if (Flags[3]) { ShareContact = true; }
        if (Flags[4]) { NeedContactsException = true; }
        if (Flags[5]) { ReportGeo = true; }
        if (Flags[7]) { Autoarchived = true; }
        if (Flags[8]) { InviteMembers = true; }
        if (Flags[6]) { GeoDistance = br.ReadInt32(); }
    }
}