// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;


///<summary>
///See <a href="https://core.telegram.org/constructor/wallPaper" />
///</summary>
[TlObject(0xa437c3ed)]
public class TWallPaper : IWallPaper
{
    public uint ConstructorId => 0xa437c3ed;
    public long Id { get; set; }
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool Creator { get; set; }
    public bool Default { get; set; }
    public bool Pattern { get; set; }
    public bool Dark { get; set; }
    public long AccessHash { get; set; }
    public string Slug { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/Document" />
    ///</summary>
    public MyTelegram.Schema.IDocument Document { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/WallPaperSettings" />
    ///</summary>
    public MyTelegram.Schema.IWallPaperSettings? Settings { get; set; }

    public void ComputeFlag()
    {
        if (Creator) { Flags[0] = true; }
        if (Default) { Flags[1] = true; }
        if (Pattern) { Flags[3] = true; }
        if (Dark) { Flags[4] = true; }
        if (Settings != null) { Flags[2] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Write(Id);
        bw.Serialize(Flags);
        bw.Write(AccessHash);
        bw.Serialize(Slug);
        Document.Serialize(bw);
        if (Flags[2]) { Settings.Serialize(bw); }
    }

    public void Deserialize(BinaryReader br)
    {
        Id = br.ReadInt64();
        Flags = br.Deserialize<BitArray>();
        if (Flags[0]) { Creator = true; }
        if (Flags[1]) { Default = true; }
        if (Flags[3]) { Pattern = true; }
        if (Flags[4]) { Dark = true; }
        AccessHash = br.ReadInt64();
        Slug = br.Deserialize<string>();
        Document = br.Deserialize<MyTelegram.Schema.IDocument>();
        if (Flags[2]) { Settings = br.Deserialize<MyTelegram.Schema.IWallPaperSettings>(); }
    }
}