// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;


///<summary>
///See <a href="https://core.telegram.org/constructor/dialogFilter" />
///</summary>
[TlObject(0x7438f7e8)]
public class TDialogFilter : IDialogFilter
{
    public uint ConstructorId => 0x7438f7e8;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool Contacts { get; set; }
    public bool NonContacts { get; set; }
    public bool Groups { get; set; }
    public bool Broadcasts { get; set; }
    public bool Bots { get; set; }
    public bool ExcludeMuted { get; set; }
    public bool ExcludeRead { get; set; }
    public bool ExcludeArchived { get; set; }
    public int Id { get; set; }
    public string Title { get; set; }
    public string? Emoticon { get; set; }
    public TVector<MyTelegram.Schema.IInputPeer> PinnedPeers { get; set; }
    public TVector<MyTelegram.Schema.IInputPeer> IncludePeers { get; set; }
    public TVector<MyTelegram.Schema.IInputPeer> ExcludePeers { get; set; }

    public void ComputeFlag()
    {
        if (Contacts) { Flags[0] = true; }
        if (NonContacts) { Flags[1] = true; }
        if (Groups) { Flags[2] = true; }
        if (Broadcasts) { Flags[3] = true; }
        if (Bots) { Flags[4] = true; }
        if (ExcludeMuted) { Flags[11] = true; }
        if (ExcludeRead) { Flags[12] = true; }
        if (ExcludeArchived) { Flags[13] = true; }
        if (Emoticon != null) { Flags[25] = true; }

    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        bw.Write(Id);
        bw.Serialize(Title);
        if (Flags[25]) { bw.Serialize(Emoticon); }
        PinnedPeers.Serialize(bw);
        IncludePeers.Serialize(bw);
        ExcludePeers.Serialize(bw);
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[0]) { Contacts = true; }
        if (Flags[1]) { NonContacts = true; }
        if (Flags[2]) { Groups = true; }
        if (Flags[3]) { Broadcasts = true; }
        if (Flags[4]) { Bots = true; }
        if (Flags[11]) { ExcludeMuted = true; }
        if (Flags[12]) { ExcludeRead = true; }
        if (Flags[13]) { ExcludeArchived = true; }
        Id = br.ReadInt32();
        Title = br.Deserialize<string>();
        if (Flags[25]) { Emoticon = br.Deserialize<string>(); }
        PinnedPeers = br.Deserialize<TVector<MyTelegram.Schema.IInputPeer>>();
        IncludePeers = br.Deserialize<TVector<MyTelegram.Schema.IInputPeer>>();
        ExcludePeers = br.Deserialize<TVector<MyTelegram.Schema.IInputPeer>>();
    }
}