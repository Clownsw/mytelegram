// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;


///<summary>
///See <a href="https://core.telegram.org/constructor/pollResults" />
///</summary>
[TlObject(0xdcb82ea3)]
public class TPollResults : IPollResults
{
    public uint ConstructorId => 0xdcb82ea3;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool Min { get; set; }
    public TVector<MyTelegram.Schema.IPollAnswerVoters>? Results { get; set; }
    public int? TotalVoters { get; set; }
    public TVector<long>? RecentVoters { get; set; }
    public string? Solution { get; set; }
    public TVector<MyTelegram.Schema.IMessageEntity>? SolutionEntities { get; set; }

    public void ComputeFlag()
    {
        if (Min) { Flags[0] = true; }
        if (Results?.Count > 0) { Flags[1] = true; }
        if (TotalVoters != 0 && TotalVoters.HasValue) { Flags[2] = true; }
        if (RecentVoters?.Count > 0) { Flags[3] = true; }
        if (Solution != null) { Flags[4] = true; }
        if (SolutionEntities?.Count > 0) { Flags[4] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        if (Flags[1]) { Results.Serialize(bw); }
        if (Flags[2]) { bw.Write(TotalVoters.Value); }
        if (Flags[3]) { RecentVoters.Serialize(bw); }
        if (Flags[4]) { bw.Serialize(Solution); }
        if (Flags[4]) { SolutionEntities.Serialize(bw); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[0]) { Min = true; }
        if (Flags[1]) { Results = br.Deserialize<TVector<MyTelegram.Schema.IPollAnswerVoters>>(); }
        if (Flags[2]) { TotalVoters = br.ReadInt32(); }
        if (Flags[3]) { RecentVoters = br.Deserialize<TVector<long>>(); }
        if (Flags[4]) { Solution = br.Deserialize<string>(); }
        if (Flags[4]) { SolutionEntities = br.Deserialize<TVector<MyTelegram.Schema.IMessageEntity>>(); }
    }
}