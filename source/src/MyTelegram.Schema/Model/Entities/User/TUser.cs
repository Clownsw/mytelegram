// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;


///<summary>
///See <a href="https://core.telegram.org/constructor/user" />
///</summary>
[TlObject(0x3ff6ecb0)]
public class TUser : IUser
{
    public uint ConstructorId => 0x3ff6ecb0;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool Self { get; set; }
    public bool Contact { get; set; }
    public bool MutualContact { get; set; }
    public bool Deleted { get; set; }
    public bool Bot { get; set; }
    public bool BotChatHistory { get; set; }
    public bool BotNochats { get; set; }
    public bool Verified { get; set; }
    public bool Restricted { get; set; }
    public bool Min { get; set; }
    public bool BotInlineGeo { get; set; }
    public bool Support { get; set; }
    public bool Scam { get; set; }
    public bool ApplyMinPhoto { get; set; }
    public bool Fake { get; set; }
    public bool BotAttachMenu { get; set; }
    public long Id { get; set; }
    public long? AccessHash { get; set; }
    public string? FirstName { get; set; }
    public string? LastName { get; set; }
    public string? Username { get; set; }
    public string? Phone { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/UserProfilePhoto" />
    ///</summary>
    public MyTelegram.Schema.IUserProfilePhoto? Photo { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/UserStatus" />
    ///</summary>
    public MyTelegram.Schema.IUserStatus? Status { get; set; }
    public int? BotInfoVersion { get; set; }
    public TVector<MyTelegram.Schema.IRestrictionReason>? RestrictionReason { get; set; }
    public string? BotInlinePlaceholder { get; set; }
    public string? LangCode { get; set; }

    public void ComputeFlag()
    {
        if (Self) { Flags[10] = true; }
        if (Contact) { Flags[11] = true; }
        if (MutualContact) { Flags[12] = true; }
        if (Deleted) { Flags[13] = true; }
        if (Bot) { Flags[14] = true; }
        if (BotChatHistory) { Flags[15] = true; }
        if (BotNochats) { Flags[16] = true; }
        if (Verified) { Flags[17] = true; }
        if (Restricted) { Flags[18] = true; }
        if (Min) { Flags[20] = true; }
        if (BotInlineGeo) { Flags[21] = true; }
        if (Support) { Flags[23] = true; }
        if (Scam) { Flags[24] = true; }
        if (ApplyMinPhoto) { Flags[25] = true; }
        if (Fake) { Flags[26] = true; }
        if (BotAttachMenu) { Flags[27] = true; }
        if (AccessHash != 0 && AccessHash.HasValue) { Flags[0] = true; }
        if (FirstName != null) { Flags[1] = true; }
        if (LastName != null) { Flags[2] = true; }
        if (Username != null) { Flags[3] = true; }
        if (Phone != null) { Flags[4] = true; }
        if (Photo != null) { Flags[5] = true; }
        if (Status != null) { Flags[6] = true; }
        if (BotInfoVersion != 0 && BotInfoVersion.HasValue) { Flags[14] = true; }
        if (RestrictionReason?.Count > 0) { Flags[18] = true; }
        if (BotInlinePlaceholder != null) { Flags[19] = true; }
        if (LangCode != null) { Flags[22] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        bw.Write(Id);
        if (Flags[0]) { bw.Write(AccessHash.Value); }
        if (Flags[1]) { bw.Serialize(FirstName); }
        if (Flags[2]) { bw.Serialize(LastName); }
        if (Flags[3]) { bw.Serialize(Username); }
        if (Flags[4]) { bw.Serialize(Phone); }
        if (Flags[5]) { Photo.Serialize(bw); }
        if (Flags[6]) { Status.Serialize(bw); }
        if (Flags[14]) { bw.Write(BotInfoVersion.Value); }
        if (Flags[18]) { RestrictionReason.Serialize(bw); }
        if (Flags[19]) { bw.Serialize(BotInlinePlaceholder); }
        if (Flags[22]) { bw.Serialize(LangCode); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[10]) { Self = true; }
        if (Flags[11]) { Contact = true; }
        if (Flags[12]) { MutualContact = true; }
        if (Flags[13]) { Deleted = true; }
        if (Flags[14]) { Bot = true; }
        if (Flags[15]) { BotChatHistory = true; }
        if (Flags[16]) { BotNochats = true; }
        if (Flags[17]) { Verified = true; }
        if (Flags[18]) { Restricted = true; }
        if (Flags[20]) { Min = true; }
        if (Flags[21]) { BotInlineGeo = true; }
        if (Flags[23]) { Support = true; }
        if (Flags[24]) { Scam = true; }
        if (Flags[25]) { ApplyMinPhoto = true; }
        if (Flags[26]) { Fake = true; }
        if (Flags[27]) { BotAttachMenu = true; }
        Id = br.ReadInt64();
        if (Flags[0]) { AccessHash = br.ReadInt64(); }
        if (Flags[1]) { FirstName = br.Deserialize<string>(); }
        if (Flags[2]) { LastName = br.Deserialize<string>(); }
        if (Flags[3]) { Username = br.Deserialize<string>(); }
        if (Flags[4]) { Phone = br.Deserialize<string>(); }
        if (Flags[5]) { Photo = br.Deserialize<MyTelegram.Schema.IUserProfilePhoto>(); }
        if (Flags[6]) { Status = br.Deserialize<MyTelegram.Schema.IUserStatus>(); }
        if (Flags[14]) { BotInfoVersion = br.ReadInt32(); }
        if (Flags[18]) { RestrictionReason = br.Deserialize<TVector<MyTelegram.Schema.IRestrictionReason>>(); }
        if (Flags[19]) { BotInlinePlaceholder = br.Deserialize<string>(); }
        if (Flags[22]) { LangCode = br.Deserialize<string>(); }
    }
}