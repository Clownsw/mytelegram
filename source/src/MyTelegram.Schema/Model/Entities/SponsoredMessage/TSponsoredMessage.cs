// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;


///<summary>
///See <a href="https://core.telegram.org/constructor/sponsoredMessage" />
///</summary>
[TlObject(0x2a3c381f)]
public class TSponsoredMessage : ISponsoredMessage
{
    public uint ConstructorId => 0x2a3c381f;
    public BitArray Flags { get; set; } = new BitArray(32);
    public byte[] RandomId { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/Peer" />
    ///</summary>
    public MyTelegram.Schema.IPeer FromId { get; set; }
    public string? StartParam { get; set; }
    public string Message { get; set; }
    public TVector<MyTelegram.Schema.IMessageEntity>? Entities { get; set; }

    public void ComputeFlag()
    {
        if (StartParam != null) { Flags[0] = true; }
        if (Entities?.Count > 0) { Flags[1] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        bw.Serialize(RandomId);
        FromId.Serialize(bw);
        if (Flags[0]) { bw.Serialize(StartParam); }
        bw.Serialize(Message);
        if (Flags[1]) { Entities.Serialize(bw); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        RandomId = br.Deserialize<byte[]>();
        FromId = br.Deserialize<MyTelegram.Schema.IPeer>();
        if (Flags[0]) { StartParam = br.Deserialize<string>(); }
        Message = br.Deserialize<string>();
        if (Flags[1]) { Entities = br.Deserialize<TVector<MyTelegram.Schema.IMessageEntity>>(); }
    }
}