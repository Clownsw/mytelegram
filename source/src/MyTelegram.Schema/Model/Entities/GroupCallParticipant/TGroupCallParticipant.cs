// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;


///<summary>
///See <a href="https://core.telegram.org/constructor/groupCallParticipant" />
///</summary>
[TlObject(0xeba636fe)]
public class TGroupCallParticipant : IGroupCallParticipant
{
    public uint ConstructorId => 0xeba636fe;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool Muted { get; set; }
    public bool Left { get; set; }
    public bool CanSelfUnmute { get; set; }
    public bool JustJoined { get; set; }
    public bool Versioned { get; set; }
    public bool Min { get; set; }
    public bool MutedByYou { get; set; }
    public bool VolumeByAdmin { get; set; }
    public bool Self { get; set; }
    public bool VideoJoined { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/Peer" />
    ///</summary>
    public MyTelegram.Schema.IPeer Peer { get; set; }
    public int Date { get; set; }
    public int? ActiveDate { get; set; }
    public int Source { get; set; }
    public int? Volume { get; set; }
    public string? About { get; set; }
    public long? RaiseHandRating { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/GroupCallParticipantVideo" />
    ///</summary>
    public MyTelegram.Schema.IGroupCallParticipantVideo? Video { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/GroupCallParticipantVideo" />
    ///</summary>
    public MyTelegram.Schema.IGroupCallParticipantVideo? Presentation { get; set; }

    public void ComputeFlag()
    {
        if (Muted) { Flags[0] = true; }
        if (Left) { Flags[1] = true; }
        if (CanSelfUnmute) { Flags[2] = true; }
        if (JustJoined) { Flags[4] = true; }
        if (Versioned) { Flags[5] = true; }
        if (Min) { Flags[8] = true; }
        if (MutedByYou) { Flags[9] = true; }
        if (VolumeByAdmin) { Flags[10] = true; }
        if (Self) { Flags[12] = true; }
        if (VideoJoined) { Flags[15] = true; }
        if (ActiveDate != 0 && ActiveDate.HasValue) { Flags[3] = true; }
        if (Volume != 0 && Volume.HasValue) { Flags[7] = true; }
        if (About != null) { Flags[11] = true; }
        if (RaiseHandRating != 0 && RaiseHandRating.HasValue) { Flags[13] = true; }
        if (Video != null) { Flags[6] = true; }
        if (Presentation != null) { Flags[14] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        Peer.Serialize(bw);
        bw.Write(Date);
        if (Flags[3]) { bw.Write(ActiveDate.Value); }
        bw.Write(Source);
        if (Flags[7]) { bw.Write(Volume.Value); }
        if (Flags[11]) { bw.Serialize(About); }
        if (Flags[13]) { bw.Write(RaiseHandRating.Value); }
        if (Flags[6]) { Video.Serialize(bw); }
        if (Flags[14]) { Presentation.Serialize(bw); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[0]) { Muted = true; }
        if (Flags[1]) { Left = true; }
        if (Flags[2]) { CanSelfUnmute = true; }
        if (Flags[4]) { JustJoined = true; }
        if (Flags[5]) { Versioned = true; }
        if (Flags[8]) { Min = true; }
        if (Flags[9]) { MutedByYou = true; }
        if (Flags[10]) { VolumeByAdmin = true; }
        if (Flags[12]) { Self = true; }
        if (Flags[15]) { VideoJoined = true; }
        Peer = br.Deserialize<MyTelegram.Schema.IPeer>();
        Date = br.ReadInt32();
        if (Flags[3]) { ActiveDate = br.ReadInt32(); }
        Source = br.ReadInt32();
        if (Flags[7]) { Volume = br.ReadInt32(); }
        if (Flags[11]) { About = br.Deserialize<string>(); }
        if (Flags[13]) { RaiseHandRating = br.ReadInt64(); }
        if (Flags[6]) { Video = br.Deserialize<MyTelegram.Schema.IGroupCallParticipantVideo>(); }
        if (Flags[14]) { Presentation = br.Deserialize<MyTelegram.Schema.IGroupCallParticipantVideo>(); }
    }
}