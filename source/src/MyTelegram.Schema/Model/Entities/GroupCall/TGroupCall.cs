// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;


///<summary>
///See <a href="https://core.telegram.org/constructor/groupCall" />
///</summary>
[TlObject(0xd597650c)]
public class TGroupCall : IGroupCall
{
    public uint ConstructorId => 0xd597650c;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool JoinMuted { get; set; }
    public bool CanChangeJoinMuted { get; set; }
    public bool JoinDateAsc { get; set; }
    public bool ScheduleStartSubscribed { get; set; }
    public bool CanStartVideo { get; set; }
    public bool RecordVideoActive { get; set; }
    public long Id { get; set; }
    public long AccessHash { get; set; }
    public int ParticipantsCount { get; set; }
    public string? Title { get; set; }
    public int? StreamDcId { get; set; }
    public int? RecordStartDate { get; set; }
    public int? ScheduleDate { get; set; }
    public int? UnmutedVideoCount { get; set; }
    public int UnmutedVideoLimit { get; set; }
    public int Version { get; set; }

    public void ComputeFlag()
    {
        if (JoinMuted) { Flags[1] = true; }
        if (CanChangeJoinMuted) { Flags[2] = true; }
        if (JoinDateAsc) { Flags[6] = true; }
        if (ScheduleStartSubscribed) { Flags[8] = true; }
        if (CanStartVideo) { Flags[9] = true; }
        if (RecordVideoActive) { Flags[11] = true; }
        if (Title != null) { Flags[3] = true; }
        if (StreamDcId != 0 && StreamDcId.HasValue) { Flags[4] = true; }
        if (RecordStartDate != 0 && RecordStartDate.HasValue) { Flags[5] = true; }
        if (ScheduleDate != 0 && ScheduleDate.HasValue) { Flags[7] = true; }
        if (UnmutedVideoCount != 0 && UnmutedVideoCount.HasValue) { Flags[10] = true; }

    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        bw.Write(Id);
        bw.Write(AccessHash);
        bw.Write(ParticipantsCount);
        if (Flags[3]) { bw.Serialize(Title); }
        if (Flags[4]) { bw.Write(StreamDcId.Value); }
        if (Flags[5]) { bw.Write(RecordStartDate.Value); }
        if (Flags[7]) { bw.Write(ScheduleDate.Value); }
        if (Flags[10]) { bw.Write(UnmutedVideoCount.Value); }
        bw.Write(UnmutedVideoLimit);
        bw.Write(Version);
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[1]) { JoinMuted = true; }
        if (Flags[2]) { CanChangeJoinMuted = true; }
        if (Flags[6]) { JoinDateAsc = true; }
        if (Flags[8]) { ScheduleStartSubscribed = true; }
        if (Flags[9]) { CanStartVideo = true; }
        if (Flags[11]) { RecordVideoActive = true; }
        Id = br.ReadInt64();
        AccessHash = br.ReadInt64();
        ParticipantsCount = br.ReadInt32();
        if (Flags[3]) { Title = br.Deserialize<string>(); }
        if (Flags[4]) { StreamDcId = br.ReadInt32(); }
        if (Flags[5]) { RecordStartDate = br.ReadInt32(); }
        if (Flags[7]) { ScheduleDate = br.ReadInt32(); }
        if (Flags[10]) { UnmutedVideoCount = br.ReadInt32(); }
        UnmutedVideoLimit = br.ReadInt32();
        Version = br.ReadInt32();
    }
}