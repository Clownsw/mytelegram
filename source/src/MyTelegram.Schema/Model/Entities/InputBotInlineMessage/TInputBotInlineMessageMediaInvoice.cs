// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;


///<summary>
///See <a href="https://core.telegram.org/constructor/inputBotInlineMessageMediaInvoice" />
///</summary>
[TlObject(0xd7e78225)]
public class TInputBotInlineMessageMediaInvoice : IInputBotInlineMessage
{
    public uint ConstructorId => 0xd7e78225;
    public BitArray Flags { get; set; } = new BitArray(32);
    public string Title { get; set; }
    public string Description { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InputWebDocument" />
    ///</summary>
    public MyTelegram.Schema.IInputWebDocument? Photo { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/Invoice" />
    ///</summary>
    public MyTelegram.Schema.IInvoice Invoice { get; set; }
    public byte[] Payload { get; set; }
    public string Provider { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/DataJSON" />
    ///</summary>
    public MyTelegram.Schema.IDataJSON ProviderData { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/ReplyMarkup" />
    ///</summary>
    public MyTelegram.Schema.IReplyMarkup? ReplyMarkup { get; set; }

    public void ComputeFlag()
    {
        if (Photo != null) { Flags[0] = true; }
        if (ReplyMarkup != null) { Flags[2] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        bw.Serialize(Title);
        bw.Serialize(Description);
        if (Flags[0]) { Photo.Serialize(bw); }
        Invoice.Serialize(bw);
        bw.Serialize(Payload);
        bw.Serialize(Provider);
        ProviderData.Serialize(bw);
        if (Flags[2]) { ReplyMarkup.Serialize(bw); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        Title = br.Deserialize<string>();
        Description = br.Deserialize<string>();
        if (Flags[0]) { Photo = br.Deserialize<MyTelegram.Schema.IInputWebDocument>(); }
        Invoice = br.Deserialize<MyTelegram.Schema.IInvoice>();
        Payload = br.Deserialize<byte[]>();
        Provider = br.Deserialize<string>();
        ProviderData = br.Deserialize<MyTelegram.Schema.IDataJSON>();
        if (Flags[2]) { ReplyMarkup = br.Deserialize<MyTelegram.Schema.IReplyMarkup>(); }
    }
}