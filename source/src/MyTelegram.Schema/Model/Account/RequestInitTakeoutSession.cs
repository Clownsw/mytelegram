// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Account;

///<summary>
///See <a href="https://core.telegram.org/method/account.initTakeoutSession" />
///</summary>
[TlObject(0xf05b4804)]
public sealed class RequestInitTakeoutSession : IRequest<MyTelegram.Schema.Account.ITakeout>
{
    public uint ConstructorId => 0xf05b4804;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool Contacts { get; set; }
    public bool MessageUsers { get; set; }
    public bool MessageChats { get; set; }
    public bool MessageMegagroups { get; set; }
    public bool MessageChannels { get; set; }
    public bool Files { get; set; }
    public int? FileMaxSize { get; set; }

    public void ComputeFlag()
    {
        if (Contacts) { Flags[0] = true; }
        if (MessageUsers) { Flags[1] = true; }
        if (MessageChats) { Flags[2] = true; }
        if (MessageMegagroups) { Flags[3] = true; }
        if (MessageChannels) { Flags[4] = true; }
        if (Files) { Flags[5] = true; }
        if (FileMaxSize != 0 && FileMaxSize.HasValue) { Flags[5] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        if (Flags[5]) { bw.Write(FileMaxSize.Value); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[0]) { Contacts = true; }
        if (Flags[1]) { MessageUsers = true; }
        if (Flags[2]) { MessageChats = true; }
        if (Flags[3]) { MessageMegagroups = true; }
        if (Flags[4]) { MessageChannels = true; }
        if (Flags[5]) { Files = true; }
        if (Flags[5]) { FileMaxSize = br.ReadInt32(); }
    }
}
