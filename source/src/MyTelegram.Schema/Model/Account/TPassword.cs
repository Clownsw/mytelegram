// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Account;


///<summary>
///See <a href="https://core.telegram.org/constructor/account.password" />
///</summary>
[TlObject(0x185b184f)]
public class TPassword : IPassword
{
    public uint ConstructorId => 0x185b184f;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool HasRecovery { get; set; }
    public bool HasSecureValues { get; set; }
    public bool HasPassword { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/PasswordKdfAlgo" />
    ///</summary>
    public MyTelegram.Schema.IPasswordKdfAlgo? CurrentAlgo { get; set; }
    public byte[]? SrpB { get; set; }
    public long? SrpId { get; set; }
    public string? Hint { get; set; }
    public string? EmailUnconfirmedPattern { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/PasswordKdfAlgo" />
    ///</summary>
    public MyTelegram.Schema.IPasswordKdfAlgo NewAlgo { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/SecurePasswordKdfAlgo" />
    ///</summary>
    public MyTelegram.Schema.ISecurePasswordKdfAlgo NewSecureAlgo { get; set; }
    public byte[] SecureRandom { get; set; }
    public int? PendingResetDate { get; set; }

    public void ComputeFlag()
    {
        if (HasRecovery) { Flags[0] = true; }
        if (HasSecureValues) { Flags[1] = true; }
        if (HasPassword) { Flags[2] = true; }
        if (CurrentAlgo != null) { Flags[2] = true; }
        if (SrpB != null) { Flags[2] = true; }
        if (SrpId != 0 && SrpId.HasValue) { Flags[2] = true; }
        if (Hint != null) { Flags[3] = true; }
        if (EmailUnconfirmedPattern != null) { Flags[4] = true; }
        if (PendingResetDate != 0 && PendingResetDate.HasValue) { Flags[5] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        if (Flags[2]) { CurrentAlgo.Serialize(bw); }
        if (Flags[2]) { bw.Serialize(SrpB); }
        if (Flags[2]) { bw.Write(SrpId.Value); }
        if (Flags[3]) { bw.Serialize(Hint); }
        if (Flags[4]) { bw.Serialize(EmailUnconfirmedPattern); }
        NewAlgo.Serialize(bw);
        NewSecureAlgo.Serialize(bw);
        bw.Serialize(SecureRandom);
        if (Flags[5]) { bw.Write(PendingResetDate.Value); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[0]) { HasRecovery = true; }
        if (Flags[1]) { HasSecureValues = true; }
        if (Flags[2]) { HasPassword = true; }
        if (Flags[2]) { CurrentAlgo = br.Deserialize<MyTelegram.Schema.IPasswordKdfAlgo>(); }
        if (Flags[2]) { SrpB = br.Deserialize<byte[]>(); }
        if (Flags[2]) { SrpId = br.ReadInt64(); }
        if (Flags[3]) { Hint = br.Deserialize<string>(); }
        if (Flags[4]) { EmailUnconfirmedPattern = br.Deserialize<string>(); }
        NewAlgo = br.Deserialize<MyTelegram.Schema.IPasswordKdfAlgo>();
        NewSecureAlgo = br.Deserialize<MyTelegram.Schema.ISecurePasswordKdfAlgo>();
        SecureRandom = br.Deserialize<byte[]>();
        if (Flags[5]) { PendingResetDate = br.ReadInt32(); }
    }
}