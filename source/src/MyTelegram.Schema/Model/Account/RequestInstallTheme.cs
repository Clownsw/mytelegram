// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Account;

///<summary>
///See <a href="https://core.telegram.org/method/account.installTheme" />
///</summary>
[TlObject(0xc727bb3b)]
public sealed class RequestInstallTheme : IRequest<IBool>
{
    public uint ConstructorId => 0xc727bb3b;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool Dark { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InputTheme" />
    ///</summary>
    public MyTelegram.Schema.IInputTheme? Theme { get; set; }
    public string? Format { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/BaseTheme" />
    ///</summary>
    public MyTelegram.Schema.IBaseTheme? BaseTheme { get; set; }

    public void ComputeFlag()
    {
        if (Dark) { Flags[0] = true; }
        if (Theme != null) { Flags[1] = true; }
        if (Format != null) { Flags[2] = true; }
        if (BaseTheme != null) { Flags[3] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        if (Flags[1]) { Theme.Serialize(bw); }
        if (Flags[2]) { bw.Serialize(Format); }
        if (Flags[3]) { BaseTheme.Serialize(bw); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[0]) { Dark = true; }
        if (Flags[1]) { Theme = br.Deserialize<MyTelegram.Schema.IInputTheme>(); }
        if (Flags[2]) { Format = br.Deserialize<string>(); }
        if (Flags[3]) { BaseTheme = br.Deserialize<MyTelegram.Schema.IBaseTheme>(); }
    }
}
