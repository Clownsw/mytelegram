// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Account;


///<summary>
///See <a href="https://core.telegram.org/constructor/account.passwordInputSettings" />
///</summary>
[TlObject(0xc23727c9)]
public class TPasswordInputSettings : IPasswordInputSettings
{
    public uint ConstructorId => 0xc23727c9;
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    ///See <a href="https://core.telegram.org/type/PasswordKdfAlgo" />
    ///</summary>
    public MyTelegram.Schema.IPasswordKdfAlgo? NewAlgo { get; set; }
    public byte[]? NewPasswordHash { get; set; }
    public string? Hint { get; set; }
    public string? Email { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/SecureSecretSettings" />
    ///</summary>
    public MyTelegram.Schema.ISecureSecretSettings? NewSecureSettings { get; set; }

    public void ComputeFlag()
    {
        if (NewAlgo != null) { Flags[0] = true; }
        if (NewPasswordHash != null) { Flags[0] = true; }
        if (Hint != null) { Flags[0] = true; }
        if (Email != null) { Flags[1] = true; }
        if (NewSecureSettings != null) { Flags[2] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        if (Flags[0]) { NewAlgo.Serialize(bw); }
        if (Flags[0]) { bw.Serialize(NewPasswordHash); }
        if (Flags[0]) { bw.Serialize(Hint); }
        if (Flags[1]) { bw.Serialize(Email); }
        if (Flags[2]) { NewSecureSettings.Serialize(bw); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[0]) { NewAlgo = br.Deserialize<MyTelegram.Schema.IPasswordKdfAlgo>(); }
        if (Flags[0]) { NewPasswordHash = br.Deserialize<byte[]>(); }
        if (Flags[0]) { Hint = br.Deserialize<string>(); }
        if (Flags[1]) { Email = br.Deserialize<string>(); }
        if (Flags[2]) { NewSecureSettings = br.Deserialize<MyTelegram.Schema.ISecureSecretSettings>(); }
    }
}