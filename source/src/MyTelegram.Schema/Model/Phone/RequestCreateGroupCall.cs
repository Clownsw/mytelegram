// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Phone;

///<summary>
///See <a href="https://core.telegram.org/method/phone.createGroupCall" />
///</summary>
[TlObject(0x48cdc6d8)]
public sealed class RequestCreateGroupCall : IRequest<MyTelegram.Schema.IUpdates>
{
    public uint ConstructorId => 0x48cdc6d8;
    public BitArray Flags { get; set; } = new BitArray(32);
    public bool RtmpStream { get; set; }

    ///<summary>
    ///See <a href="https://core.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer Peer { get; set; }
    public int RandomId { get; set; }
    public string? Title { get; set; }
    public int? ScheduleDate { get; set; }

    public void ComputeFlag()
    {
        if (RtmpStream) { Flags[2] = true; }
        if (Title != null) { Flags[0] = true; }
        if (ScheduleDate != 0 && ScheduleDate.HasValue) { Flags[1] = true; }
    }

    public void Serialize(BinaryWriter bw)
    {
        ComputeFlag();
        bw.Write(ConstructorId);
        bw.Serialize(Flags);
        Peer.Serialize(bw);
        bw.Write(RandomId);
        if (Flags[0]) { bw.Serialize(Title); }
        if (Flags[1]) { bw.Write(ScheduleDate.Value); }
    }

    public void Deserialize(BinaryReader br)
    {
        Flags = br.Deserialize<BitArray>();
        if (Flags[2]) { RtmpStream = true; }
        Peer = br.Deserialize<MyTelegram.Schema.IInputPeer>();
        RandomId = br.ReadInt32();
        if (Flags[0]) { Title = br.Deserialize<string>(); }
        if (Flags[1]) { ScheduleDate = br.ReadInt32(); }
    }
}
